# Generated by Copilot
"""
MCP Server implementation using official MCP standard library
Leverages existing MCPTools for compatibility
"""

import asyncio
import logging
from typing import Dict, Any, List, Optional

try:
    from mcp.server import Server
    from mcp.server import stdio  
    from mcp.types import Tool, TextContent
    import mcp.types as types
except ImportError:
    print("‚ùå MCP standard library not available. Install with: pip install mcp>=1.0.0")
    raise

# Import our existing tools
from src.tools import MCPTools

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize MCP Server 
app = Server("py-chroma-mcp")

# Global MCP tools instance
mcp_tools = None

async def initialize_server():
    """Initialize server components"""
    global mcp_tools
    
    try:
        # Initialize our existing tools
        mcp_tools = MCPTools()
        logger.info("‚úÖ MCP Tools initialized successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize server: {e}")
        raise

# MCP handlers - delegate to existing MCPTools

@app.list_tools()
async def list_tools() -> List[Tool]:
    """List available tools"""
    if not mcp_tools:
        await initialize_server()
    
    # Convert our tool definitions to MCP Tool objects
    tool_definitions = mcp_tools.get_tools_list()
    mcp_tool_list = []
    
    for tool_def in tool_definitions:
        mcp_tool = Tool(
            name=tool_def["name"],
            description=tool_def["description"],
            inputSchema=tool_def["input_schema"]
        )
        mcp_tool_list.append(mcp_tool)
    
    return mcp_tool_list

@app.call_tool()
async def call_tool(name: str, arguments: Dict[str, Any]) -> List[TextContent]:
    """Handle tool calls"""
    if not mcp_tools:
        await initialize_server()
    
    try:
        # Delegate to existing tools
        result = mcp_tools.call_tool(name, arguments)
        
        # Convert result to MCP TextContent
        if isinstance(result, (dict, list)):
            import json
            result_text = json.dumps(result, ensure_ascii=False, indent=2)
        else:
            result_text = str(result)
        
        return [TextContent(type="text", text=result_text)]
        
    except Exception as e:
        error_text = f"Tool execution failed: {str(e)}"
        logger.error(f"‚ùå {error_text}")
        return [TextContent(type="text", text=error_text)]

async def main():
    """Main server entry point"""
    logger.info("üöÄ Starting MCP ChromaDB Server (Standard Library)")
    
    # Initialize server
    await initialize_server()
    
    # Run server
    async with stdio.stdio_server() as streams:
        await app.run(
            streams[0],  # stdin
            streams[1],  # stdout
            app.create_initialization_options()
        )

if __name__ == "__main__":
    asyncio.run(main())
