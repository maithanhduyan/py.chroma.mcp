# Generated by Copilot
"""
Simple metrics collection for ChromaDB MCP server.

Provides basic performance and quality metrics.
"""

import time
import logging
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, field

logger = logging.getLogger(__name__)


@dataclass
class PerformanceMetrics:
    """Container for performance measurement data."""

    operation_name: str
    execution_time: float
    memory_usage_mb: float = 0.0
    cpu_usage_percent: float = 0.0
    peak_memory_mb: float = 0.0
    start_time: float = field(default_factory=time.time)
    end_time: Optional[float] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
    error: Optional[str] = None
    success: bool = True

    def to_dict(self) -> Dict[str, Any]:
        """Convert metrics to dictionary format."""
        return {
            "operation_name": self.operation_name,
            "execution_time": self.execution_time,
            "memory_usage_mb": self.memory_usage_mb,
            "cpu_usage_percent": self.cpu_usage_percent,
            "peak_memory_mb": self.peak_memory_mb,
            "start_time": self.start_time,
            "end_time": self.end_time,
            "metadata": self.metadata,
            "error": self.error,
            "success": self.success,
        }


@dataclass
class QualityMetrics:
    """Container for data quality metrics."""

    operation_name: str
    accuracy: float
    precision: float
    recall: float
    f1_score: float
    data_quality_score: float
    metadata: Dict[str, Any] = field(default_factory=dict)


class MetricsCollector:
    """Simple metrics collection system."""

    def __init__(self):
        self.performance_metrics: List[PerformanceMetrics] = []
        self.quality_metrics: List[QualityMetrics] = []

    def add_performance_metric(self, metric: PerformanceMetrics) -> None:
        """Add performance metric."""
        self.performance_metrics.append(metric)
        logger.debug(f"üìä Added performance metric: {metric.operation_name}")

    def get_performance_summary(self) -> Dict[str, Any]:
        """Get performance summary."""
        if not self.performance_metrics:
            return {"total_operations": 0}

        execution_times = [m.execution_time for m in self.performance_metrics]

        return {
            "total_operations": len(self.performance_metrics),
            "avg_execution_time": sum(execution_times) / len(execution_times),
            "max_execution_time": max(execution_times),
            "min_execution_time": min(execution_times),
        }


# Global metrics collector
_metrics_collector = MetricsCollector()


def get_metrics_collector() -> MetricsCollector:
    """Get the global metrics collector."""
    return _metrics_collector


# Simple functions for compatibility
def benchmark_function(func):
    """Simple function benchmark decorator."""
    return func  # Simplified for now


def measure_memory_usage(operation_name: str):
    """Simple memory usage context manager."""

    class SimpleContext:
        def __enter__(self):
            return {"memory_delta_mb": 0.0, "peak_memory_mb": 0.0}

        def __exit__(self, *args):
            pass

    return SimpleContext()


def track_execution_time(operation_name: str):
    """Simple execution time context manager."""

    class SimpleContext:
        def __enter__(self):
            self.start_time = time.time()
            return self

        def __exit__(self, *args):
            execution_time = time.time() - self.start_time
            logger.info(f"‚è±Ô∏è {operation_name} took {execution_time:.2f}s")

    return SimpleContext()
