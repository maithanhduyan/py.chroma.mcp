#!/usr/bin/env python3
"""
Centralized Logger Configuration for ChromaDB MCP Server
Provides consistent logging configuration across all modules.
Generated by Copilot
"""

import logging
import sys
from pathlib import Path
from typing import Optional


class LoggerConfig:
    """Centralized logger configuration."""

    _configured = False
    _loggers = {}

    @classmethod
    def configure_logging(
        cls,
        level: int = logging.INFO,
        format_string: Optional[str] = None,
        log_to_file: bool = False,
        log_file_path: Optional[Path] = None,
    ) -> None:
        """Configure global logging settings.

        Args:
            level: Logging level (default: INFO)
            format_string: Custom format string
            log_to_file: Whether to log to file
            log_file_path: Path to log file (if log_to_file is True)
        """
        if cls._configured:
            return

        # Default format
        if format_string is None:
            format_string = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

        # Configure root logger
        handlers = []

        # Always add stderr handler to avoid stdout pollution
        stderr_handler = logging.StreamHandler(sys.stderr)
        stderr_handler.setFormatter(logging.Formatter(format_string))
        handlers.append(stderr_handler)

        # Add file handler if requested
        if log_to_file and log_file_path:
            log_file_path.parent.mkdir(parents=True, exist_ok=True)
            file_handler = logging.FileHandler(log_file_path, encoding="utf-8")
            file_handler.setFormatter(logging.Formatter(format_string))
            handlers.append(file_handler)

        # Configure root logger
        logging.basicConfig(
            level=level,
            format=format_string,
            handlers=handlers,
            force=True,  # Override any existing configuration
        )

        cls._configured = True

    @classmethod
    def get_logger(cls, name: str) -> logging.Logger:
        """Get a logger for the specified module.

        Args:
            name: Logger name (typically __name__)

        Returns:
            Configured logger instance
        """
        # Ensure logging is configured
        if not cls._configured:
            cls.configure_logging()

        # Return cached logger or create new one
        if name not in cls._loggers:
            cls._loggers[name] = logging.getLogger(name)

        return cls._loggers[name]

    @classmethod
    def set_level(cls, level: int) -> None:
        """Set logging level for all loggers.

        Args:
            level: New logging level
        """
        logging.getLogger().setLevel(level)
        for logger in cls._loggers.values():
            logger.setLevel(level)

    @classmethod
    def is_configured(cls) -> bool:
        """Check if logging is already configured."""
        return cls._configured


# Convenience function for getting loggers
def get_logger(name: str) -> logging.Logger:
    """Get a logger for the specified module.

    Args:
        name: Logger name (typically __name__)

    Returns:
        Configured logger instance

    Example:
        from utils.logger import get_logger
        logger = get_logger(__name__)
    """
    return LoggerConfig.get_logger(name)


# Auto-configure logging when module is imported
def auto_configure():
    """Auto-configure logging with default settings."""
    if not LoggerConfig.is_configured():
        LoggerConfig.configure_logging()


# Initialize logging when module is imported
auto_configure()
