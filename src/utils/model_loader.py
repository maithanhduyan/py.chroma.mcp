#!/usr/bin/env python3
"""
Add async model loading với proper synchronization để fix race condition.
Generated by Copilot
"""

import asyncio
import threading
from typing import Optional
from utils.logger import get_logger

logger = get_logger(__name__)


class ModelLoadingManager:
    """Manages async model loading với synchronization."""

    def __init__(self):
        self._loading_lock = asyncio.Lock()
        self._sync_lock = threading.Lock()
        self._is_loading = False
        self._load_complete = False
        self._load_event = asyncio.Event()

    async def ensure_model_loaded(self, embedding_manager, force_reload: bool = False):
        """Ensure model is loaded hoặc wait cho loading hoàn tất.

        Args:
            embedding_manager: EmbeddingManager instance
            force_reload: Whether to force reload

        Returns:
            True if model loaded successfully
        """
        # Nếu model đã load và không force reload
        if self._load_complete and not force_reload:
            return True

        # Nếu đang loading, wait cho nó hoàn tất
        if self._is_loading:
            logger.info("⏳ Model is loading, waiting for completion...")
            await self._load_event.wait()
            return self._load_complete

        # Load model với lock
        async with self._loading_lock:
            # Double check sau khi acquire lock
            if self._load_complete and not force_reload:
                return True

            self._is_loading = True
            self._load_event.clear()

            try:
                logger.info("🔄 Starting async model loading...")

                # Run model loading in thread pool để không block event loop
                loop = asyncio.get_event_loop()
                result = await loop.run_in_executor(
                    None, self._sync_load_model, embedding_manager, force_reload
                )

                self._load_complete = result
                logger.info(f"✅ Async model loading completed: {result}")
                return result

            except Exception as e:
                logger.error(f"❌ Async model loading failed: {e}")
                self._load_complete = False
                return False

            finally:
                self._is_loading = False
                self._load_event.set()  # Notify waiting coroutines

    def _sync_load_model(self, embedding_manager, force_reload: bool) -> bool:
        """Synchronous model loading method."""
        try:
            from config import get_embedding_config

            embedding_config = get_embedding_config()
            default_model = embedding_config["default_model"]

            logger.info(f"🎯 Loading model: {default_model}")
            return embedding_manager.load_model(default_model, force_reload)

        except Exception as e:
            logger.error(f"❌ Model loading failed: {e}")
            return False

    def reset(self):
        """Reset loading state (for testing)."""
        with self._sync_lock:
            self._is_loading = False
            self._load_complete = False

    @property
    def is_loaded(self) -> bool:
        """Check if model is loaded."""
        return self._load_complete

    @property
    def is_loading(self) -> bool:
        """Check if model is currently loading."""
        return self._is_loading


# Global instance
_model_loading_manager: Optional[ModelLoadingManager] = None


def get_model_loading_manager() -> ModelLoadingManager:
    """Get global model loading manager."""
    global _model_loading_manager
    if _model_loading_manager is None:
        _model_loading_manager = ModelLoadingManager()
    return _model_loading_manager
