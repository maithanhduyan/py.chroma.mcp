"""
Tools module for the MCP server.
Provides ChromaDB integration and utility tools.
Generated by Copilot
"""

import logging
from typing import Dict, Any, List, Optional
import chromadb
from chromadb.config import Settings

logger = logging.getLogger(__name__)


class MCPTools:
    """
    Tools handler for MCP server operations.
    Provides ChromaDB integration and utility functions.
    """

    def __init__(self):
        """Initialize the tools handler."""
        self.chroma_client = None
        self._initialize_chroma()

    def _initialize_chroma(self):
        """Initialize ChromaDB client."""
        try:
            # Initialize ChromaDB with persistent storage
            self.chroma_client = chromadb.PersistentClient(path="./chroma_db")
            logger.info("ChromaDB client initialized successfully")
        except Exception as e:
            logger.error(f"Failed to initialize ChromaDB: {e}")
            self.chroma_client = None

    def get_tools_list(self) -> List[Dict[str, Any]]:
        """
        Get list of available tools.

        Returns:
            List of tool definitions
        """
        tools = [
            {
                "name": "create_collection",
                "description": "Create a new ChromaDB collection",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Name of the collection to create",
                        },
                        "metadata": {
                            "type": "object",
                            "description": "Optional metadata for the collection",
                        },
                    },
                    "required": ["name"],
                },
            },
            {
                "name": "list_collections",
                "description": "List all ChromaDB collections",
                "inputSchema": {"type": "object", "properties": {}},
            },
            {
                "name": "add_documents",
                "description": "Add documents to a ChromaDB collection",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "collection_name": {
                            "type": "string",
                            "description": "Name of the collection",
                        },
                        "documents": {
                            "type": "array",
                            "items": {"type": "string"},
                            "description": "List of documents to add",
                        },
                        "metadatas": {
                            "type": "array",
                            "items": {"type": "object"},
                            "description": "Optional metadata for each document",
                        },
                        "ids": {
                            "type": "array",
                            "items": {"type": "string"},
                            "description": "Optional IDs for each document",
                        },
                    },
                    "required": ["collection_name", "documents"],
                },
            },
            {
                "name": "query_collection",
                "description": "Query a ChromaDB collection",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "collection_name": {
                            "type": "string",
                            "description": "Name of the collection to query",
                        },
                        "query_texts": {
                            "type": "array",
                            "items": {"type": "string"},
                            "description": "List of query texts",
                        },
                        "n_results": {
                            "type": "integer",
                            "description": "Number of results to return (default: 10)",
                        },
                        "where": {
                            "type": "object",
                            "description": "Optional metadata filter",
                        },
                    },
                    "required": ["collection_name", "query_texts"],
                },
            },
            {
                "name": "delete_collection",
                "description": "Delete a ChromaDB collection",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Name of the collection to delete",
                        }
                    },
                    "required": ["name"],
                },
            },
            {
                "name": "echo",
                "description": "Echo back the input (useful for testing)",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "message": {
                            "type": "string",
                            "description": "Message to echo back",
                        }
                    },
                    "required": ["message"],
                },
            },
        ]

        return tools

    def call_tool(self, tool_name: str, arguments: Dict[str, Any]) -> Any:
        """
        Call a specific tool with given arguments.

        Args:
            tool_name: Name of the tool to call
            arguments: Arguments for the tool

        Returns:
            Tool execution result

        Raises:
            ValueError: If tool is not found or ChromaDB is not available
            Exception: If tool execution fails
        """
        if tool_name == "echo":
            return self._echo(arguments)
        elif tool_name == "create_collection":
            return self._create_collection(arguments)
        elif tool_name == "list_collections":
            return self._list_collections(arguments)
        elif tool_name == "add_documents":
            return self._add_documents(arguments)
        elif tool_name == "query_collection":
            return self._query_collection(arguments)
        elif tool_name == "delete_collection":
            return self._delete_collection(arguments)
        else:
            raise ValueError(f"Unknown tool: {tool_name}")

    def _echo(self, arguments: Dict[str, Any]) -> str:
        """Echo tool implementation."""
        message = arguments.get("message", "")
        return f"Echo: {message}"

    def _create_collection(self, arguments: Dict[str, Any]) -> str:
        """Create a new ChromaDB collection."""
        if not self.chroma_client:
            raise Exception("ChromaDB client not available")

        name = arguments["name"]
        metadata = arguments.get("metadata", {})

        try:
            collection = self.chroma_client.create_collection(
                name=name, metadata=metadata
            )
            return f"Collection '{name}' created successfully"
        except Exception as e:
            raise Exception(f"Failed to create collection: {str(e)}")

    def _list_collections(self, arguments: Dict[str, Any]) -> List[str]:
        """List all ChromaDB collections."""
        if not self.chroma_client:
            raise Exception("ChromaDB client not available")

        try:
            collections = self.chroma_client.list_collections()
            return [col.name for col in collections]
        except Exception as e:
            raise Exception(f"Failed to list collections: {str(e)}")

    def _add_documents(self, arguments: Dict[str, Any]) -> str:
        """Add documents to a ChromaDB collection."""
        if not self.chroma_client:
            raise Exception("ChromaDB client not available")

        collection_name = arguments["collection_name"]
        documents = arguments["documents"]
        metadatas = arguments.get("metadatas")
        ids = arguments.get("ids")

        try:
            collection = self.chroma_client.get_collection(collection_name)

            # Generate IDs if not provided
            if ids is None:
                ids = [f"doc_{i}" for i in range(len(documents))]

            collection.add(documents=documents, metadatas=metadatas, ids=ids)

            return f"Added {len(documents)} documents to collection '{collection_name}'"
        except Exception as e:
            raise Exception(f"Failed to add documents: {str(e)}")

    def _query_collection(self, arguments: Dict[str, Any]) -> Any:
        """Query a ChromaDB collection."""
        if not self.chroma_client:
            raise Exception("ChromaDB client not available")

        collection_name = arguments["collection_name"]
        query_texts = arguments["query_texts"]
        n_results = arguments.get("n_results", 10)
        where = arguments.get("where")

        try:
            collection = self.chroma_client.get_collection(collection_name)

            results = collection.query(
                query_texts=query_texts, n_results=n_results, where=where
            )

            return results
        except Exception as e:
            raise Exception(f"Failed to query collection: {str(e)}")

    def _delete_collection(self, arguments: Dict[str, Any]) -> str:
        """Delete a ChromaDB collection."""
        if not self.chroma_client:
            raise Exception("ChromaDB client not available")

        name = arguments["name"]

        try:
            self.chroma_client.delete_collection(name)
            return f"Collection '{name}' deleted successfully"
        except Exception as e:
            raise Exception(f"Failed to delete collection: {str(e)}")
