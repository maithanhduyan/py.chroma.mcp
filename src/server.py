#!/usr/bin/env python3
"""
Simple MCP (Model Context Protocol) Server using stdio.
Generated by Copilot
"""

import sys
import json
import logging
from typing import Dict, Any, Optional
from config import MCPConfig
from tools import MCPTools

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Ensure UTF-8 encoding for stdout
try:
    # Use getattr to avoid type checking issues
    if hasattr(sys.stdout, "reconfigure"):
        getattr(sys.stdout, "reconfigure")(encoding="utf-8")
except (AttributeError, TypeError):
    # Fallback for older Python versions or environments where reconfigure is not available
    import codecs

    if hasattr(sys.stdout, "buffer"):
        sys.stdout = codecs.getwriter("utf-8")(sys.stdout.buffer)


class MCPServer:
    """
    Simple MCP Server implementation following the Model Context Protocol.
    Handles stdio communication and basic MCP operations.
    """

    def __init__(self):
        """Initialize the MCP server with configuration and tools."""
        self.config = MCPConfig()
        self.tools = MCPTools()
        self.initialized = False

    def handle_initialize(self, request: Dict[str, Any]) -> Dict[str, Any]:
        """
        Handle the initialize request from the client.

        Args:
            request: The initialize request

        Returns:
            Initialize response with server capabilities
        """
        self.initialized = True

        response = {
            "jsonrpc": "2.0",
            "id": request.get("id"),
            "result": {
                "protocolVersion": "2024-11-05",
                "capabilities": {
                    "tools": {"listChanged": False},
                    "resources": {"subscribe": False, "listChanged": False},
                    "prompts": {"listChanged": False},
                },
                "serverInfo": {"name": "py-chroma-mcp", "version": "0.1.0"},
            },
        }

        logger.info("Server initialized successfully")
        return response

    def handle_tools_list(self, request: Dict[str, Any]) -> Dict[str, Any]:
        """
        Handle tools/list request.

        Args:
            request: The tools/list request

        Returns:
            List of available tools
        """
        tools_list = self.tools.get_tools_list()

        response = {
            "jsonrpc": "2.0",
            "id": request.get("id"),
            "result": {"tools": tools_list},
        }

        return response

    def handle_tools_call(self, request: Dict[str, Any]) -> Dict[str, Any]:
        """
        Handle tools/call request.

        Args:
            request: The tools/call request

        Returns:
            Tool execution result
        """
        params = request.get("params", {})
        tool_name = params.get("name")
        arguments = params.get("arguments", {})

        try:
            result = self.tools.call_tool(tool_name, arguments)

            response = {
                "jsonrpc": "2.0",
                "id": request.get("id"),
                "result": {"content": [{"type": "text", "text": str(result)}]},
            }
        except Exception as e:
            response = {
                "jsonrpc": "2.0",
                "id": request.get("id"),
                "error": {
                    "code": -32603,
                    "message": f"Tool execution failed: {str(e)}",
                },
            }

        return response

    def handle_resources_list(self, request: Dict[str, Any]) -> Dict[str, Any]:
        """
        Handle resources/list request.

        Args:
            request: The resources/list request

        Returns:
            List of available resources
        """
        response = {
            "jsonrpc": "2.0",
            "id": request.get("id"),
            "result": {"resources": []},
        }

        return response

    def handle_prompts_list(self, request: Dict[str, Any]) -> Dict[str, Any]:
        """
        Handle prompts/list request.

        Args:
            request: The prompts/list request

        Returns:
            List of available prompts
        """
        response = {
            "jsonrpc": "2.0",
            "id": request.get("id"),
            "result": {"prompts": []},
        }

        return response

    def handle_request(self, request: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Route and handle incoming MCP requests.

        Args:
            request: The incoming JSON-RPC request

        Returns:
            Response dictionary or None for notifications
        """
        method = request.get("method")

        if method == "initialize":
            return self.handle_initialize(request)
        elif method == "initialized":
            # This is a notification, no response needed
            logger.info("Client initialization confirmed")
            return None
        elif method == "tools/list":
            return self.handle_tools_list(request)
        elif method == "tools/call":
            return self.handle_tools_call(request)
        elif method == "resources/list":
            return self.handle_resources_list(request)
        elif method == "prompts/list":
            return self.handle_prompts_list(request)
        else:
            # Unknown method
            if "id" in request:
                return {
                    "jsonrpc": "2.0",
                    "id": request.get("id"),
                    "error": {"code": -32601, "message": f"Method not found: {method}"},
                }
            return None

    def run(self):
        """
        Main server loop that reads from stdin and writes to stdout.
        """
        logger.info("Starting MCP server...")

        try:
            for line in sys.stdin:
                line = line.strip()
                if not line:
                    continue

                try:
                    request = json.loads(line)
                    response = self.handle_request(request)

                    if response is not None:
                        print(json.dumps(response), flush=True)

                except json.JSONDecodeError as e:
                    logger.error(f"Invalid JSON received: {e}")
                    error_response = {
                        "jsonrpc": "2.0",
                        "id": None,
                        "error": {"code": -32700, "message": f"Parse error: {str(e)}"},
                    }
                    print(json.dumps(error_response), flush=True)

                except Exception as e:
                    logger.error(f"Unexpected error: {e}")
                    error_response = {
                        "jsonrpc": "2.0",
                        "id": request.get("id") if "request" in locals() else None,
                        "error": {
                            "code": -32603,
                            "message": f"Internal error: {str(e)}",
                        },
                    }
                    print(json.dumps(error_response), flush=True)

        except KeyboardInterrupt:
            logger.info("Server shutting down...")
        except Exception as e:
            logger.error(f"Fatal error: {e}")
            sys.exit(1)


def main():
    """Main entry point for the MCP server."""
    server = MCPServer()
    server.run()


if __name__ == "__main__":
    main()
