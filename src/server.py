#!/usr/bin/env python3
"""
FastMCP ChromaDB Server with Advanced Embedding Integration
Supports ChromaDB, custom embeddings, Vietnamese text processing, and semantic search
Uses asyncio for optimal performance
Generated by Copilot
"""

import sys
import asyncio
import logging
import time
from typing import Dict, Any, Optional

# Import FastMCP and tools
from tools import mcp

# Configure enhanced logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(sys.stderr),  # Log to stderr to avoid stdout pollution
    ],
)
logger = logging.getLogger(__name__)

# Ensure UTF-8 encoding for stdout
try:
    if hasattr(sys.stdout, "reconfigure"):
        getattr(sys.stdout, "reconfigure")(encoding="utf-8")
except (AttributeError, TypeError):
    import codecs

    if hasattr(sys.stdout, "buffer"):
        sys.stdout = codecs.getwriter("utf-8")(sys.stdout.buffer)


def log_server_startup():
    """Log server startup information."""
    startup_info = {
        "server": "ChromaDB FastMCP Server",
        "version": "2.0.0",
        "embedding_support": True,
        "vietnamese_support": True,
        "features": [
            "ChromaDB Integration",
            "Custom Embeddings (mixedbread-ai/mxbai-embed-large-v1)",
            "Vietnamese Text Processing",
            "Intelligent Chunking",
            "Semantic Search",
            "Cross-lingual Support",
        ],
        "tools": [
            "echo",
            "list_collections",
            "create_collection",
            "delete_collection",
            "add_documents",
            "query_collection",
            "get_embedding_model_info",
            "configure_embedding_model",
            "chunk_text_intelligent",
            "get_performance_metrics",  # New metrics tool
        ],
        "startup_time": time.strftime("%Y-%m-%d %H:%M:%S"),
    }

    logger.info("=" * 60)
    logger.info("🚀 FastMCP ChromaDB Server Starting")
    logger.info("=" * 60)
    logger.info(f"📋 Server: {startup_info['server']} v{startup_info['version']}")
    logger.info(f"🤖 Embedding: mixedbread-ai/mxbai-embed-large-v1")
    logger.info(f"🇻🇳 Vietnamese: Fully Supported")
    logger.info(f"🛠️ Tools: {len(startup_info['tools'])} available")
    logger.info(f"⏰ Started: {startup_info['startup_time']}")
    logger.info("=" * 60)


async def initialize_systems_async() -> Dict[str, Any]:
    """
    Initialize ChromaDB and embedding systems asynchronously.

    Returns:
        Dictionary with initialization results
    """
    logger.info("🔧 Initializing embedding systems...")

    # Import to trigger initialization
    from tools import get_chroma_client, get_embedding_manager

    # Initialize ChromaDB (this can be made async in future)
    chroma_client = get_chroma_client()
    logger.info(f"✅ ChromaDB initialized: {type(chroma_client).__name__}")

    # Initialize embeddings
    embedding_manager = get_embedding_manager()
    model_info = embedding_manager.get_model_info()

    if model_info and model_info.get("name") != "chromadb-default":
        model_name = model_info.get("name", "unknown")
        model_dim = model_info.get("embedding_dim", "unknown")
        logger.info(f"✅ Embedding model: {model_name} ({model_dim}D)")
    else:
        logger.info("✅ Embedding model: None loaded (will use ChromaDB default)")

    return {
        "chroma_client": chroma_client,
        "embedding_manager": embedding_manager,
        "model_info": model_info,
    }


def main():
    """Main server entry point - let FastMCP handle its own asyncio."""
    try:
        # Log startup information
        log_server_startup()

        # Initialize systems synchronously (FastMCP will handle async)
        import asyncio

        systems = asyncio.run(initialize_systems_async())

        logger.info("🎯 FastMCP server ready for connections")
        logger.info("=" * 60)

        # Let FastMCP server handle its own asyncio - don't wrap in asyncio.run()
        from tools import mcp

        mcp.run()

    except KeyboardInterrupt:
        logger.info("\n🛑 Server shutdown requested by user")
    except Exception as e:
        logger.error(f"💥 Server startup failed: {e}")
        logger.exception("Server startup error details:")
        raise
    finally:
        logger.info("🔚 FastMCP ChromaDB Server stopped")


if __name__ == "__main__":
    main()
