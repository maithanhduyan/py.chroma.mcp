# Generated by Copilot
from typing import Dict, List, TypedDict, Union, Any
from enum import Enum
import chromadb
from mcp.server.fastmcp import FastMCP
import os
from dotenv import load_dotenv
import argparse
from chromadb.config import Settings
import ssl
import uuid
import time
import json
import unicodedata
import re
import numpy as np
from typing_extensions import TypedDict
from sentence_transformers import SentenceTransformer

from utils.logger import get_logger
from embedding.nomic_embedding_function import NomicVietnameseEmbeddingFunction

logger = get_logger(__name__)


from chromadb.api.collection_configuration import (
    CreateCollectionConfiguration,
    CreateHNSWConfiguration,
    UpdateHNSWConfiguration,
    UpdateCollectionConfiguration,
)
from chromadb.utils.embedding_functions import (
    DefaultEmbeddingFunction,
    EmbeddingFunction,
)
from chromadb.api.types import (
    Metadata,
    OneOrMany,
)

# Initialize FastMCP server
mcp = FastMCP("chroma")

# Global variables
_chroma_client = None

# Initialize Nomic embedding model
# Generated by Copilot
model = SentenceTransformer("nomic-ai/nomic-embed-text-v2-moe", trust_remote_code=True)


# Generated by Copilot
def normalize_vietnamese_text(text: str) -> str:
    """
    Chuẩn hóa văn bản tiếng Việt để xử lý Unicode một cách nhất quán.

    Tham số:
        text: Văn bản cần chuẩn hóa

    Trả về:
        Văn bản đã được chuẩn hóa Unicode
    """
    if not text:
        return text

    # Normalize to NFC (Canonical Decomposition, followed by Canonical Composition)
    text = unicodedata.normalize("NFC", text)

    # Remove zero-width characters and other invisible characters
    text = re.sub(r"[\u200b-\u200d\ufeff]", "", text)

    # Normalize quotation marks (smart quotes to regular quotes)
    text = re.sub(r'["""]', '"', text)
    text = re.sub(r"[''']", "'", text)

    # Normalize dashes
    text = re.sub(r"[–—]", "-", text)

    # Normalize ellipsis
    text = re.sub(r"…", "...", text)

    return text


def preprocess_vietnamese_text(text: str) -> str:
    """
    Tiền xử lý văn bản tiếng Việt để chuẩn bị cho embedding và tìm kiếm.

    Tham số:
        text: Văn bản cần tiền xử lý

    Trả về:
        Văn bản đã được tiền xử lý
    """
    if not text:
        return text

    # Normalize Unicode
    text = normalize_vietnamese_text(text)

    # Remove excessive whitespace and normalize line breaks
    text = re.sub(r"\n\s*\n", "\n\n", text)  # Normalize paragraph breaks
    text = re.sub(r"\s+", " ", text)  # Collapse multiple spaces
    text = text.strip()

    return text


def create_parser():
    """Create and return the argument parser."""
    parser = argparse.ArgumentParser(description="FastMCP server for Chroma DB")
    parser.add_argument(
        "--client-type",
        choices=["http", "cloud", "persistent", "ephemeral"],
        default=os.getenv("CHROMA_CLIENT_TYPE", "ephemeral"),
        help="Type of Chroma client to use",
    )
    parser.add_argument(
        "--data-dir",
        default=os.getenv("CHROMA_DATA_DIR"),
        help="Directory for persistent client data (only used with persistent client)",
    )
    parser.add_argument(
        "--host",
        help="Chroma host (required for http client)",
        default=os.getenv("CHROMA_HOST"),
    )
    parser.add_argument(
        "--port",
        help="Chroma port (optional for http client)",
        default=os.getenv("CHROMA_PORT"),
    )
    parser.add_argument(
        "--custom-auth-credentials",
        help="Custom auth credentials (optional for http client)",
        default=os.getenv("CHROMA_CUSTOM_AUTH_CREDENTIALS"),
    )
    parser.add_argument(
        "--tenant",
        help="Chroma tenant (optional for http client)",
        default=os.getenv("CHROMA_TENANT"),
    )
    parser.add_argument(
        "--database",
        help="Chroma database (required if tenant is provided)",
        default=os.getenv("CHROMA_DATABASE"),
    )
    parser.add_argument(
        "--api-key",
        help="Chroma API key (required if tenant is provided)",
        default=os.getenv("CHROMA_API_KEY"),
    )
    parser.add_argument(
        "--ssl",
        help="Use SSL (optional for http client)",
        type=lambda x: x.lower() in ["true", "yes", "1", "t", "y"],
        default=os.getenv("CHROMA_SSL", "true").lower()
        in ["true", "yes", "1", "t", "y"],
    )
    parser.add_argument(
        "--dotenv-path",
        help="Path to .env file",
        default=os.getenv("CHROMA_DOTENV_PATH", ".chroma_env"),
    )
    return parser


def get_chroma_client(args=None):
    """Get or create the global Chroma client instance."""
    global _chroma_client
    if _chroma_client is None:
        if args is None:
            # Create parser and parse args if not provided
            parser = create_parser()
            args = parser.parse_args()

        # Load environment variables from .env file if it exists
        load_dotenv(dotenv_path=args.dotenv_path)
        logger.info(args.dotenv_path)
        if args.client_type == "http":
            if not args.host:
                raise ValueError(
                    "Host must be provided via --host flag or CHROMA_HOST environment variable when using HTTP client"
                )

            settings = Settings()
            if args.custom_auth_credentials:
                settings = Settings(
                    chroma_client_auth_provider="chromadb.auth.basic_authn.BasicAuthClientProvider",
                    chroma_client_auth_credentials=args.custom_auth_credentials,
                )

            # Handle SSL configuration
            try:
                # Ensure port is int if provided, else omit from kwargs
                http_client_kwargs = {
                    "host": args.host,
                    "ssl": args.ssl,
                    "settings": settings,
                }
                if args.port:
                    try:
                        http_client_kwargs["port"] = int(args.port)
                    except ValueError:
                        raise ValueError("Port must be an integer")
                _chroma_client = chromadb.HttpClient(**http_client_kwargs)
            except ssl.SSLError as e:
                logger.info(f"SSL connection failed: {str(e)}")
                raise
            except Exception as e:
                logger.info(f"Error connecting to HTTP client: {str(e)}")
                raise

        elif args.client_type == "cloud":
            if not args.tenant:
                raise ValueError(
                    "Tenant must be provided via --tenant flag or CHROMA_TENANT environment variable when using cloud client"
                )
            if not args.database:
                raise ValueError(
                    "Database must be provided via --database flag or CHROMA_DATABASE environment variable when using cloud client"
                )
            if not args.api_key:
                raise ValueError(
                    "API key must be provided via --api-key flag or CHROMA_API_KEY environment variable when using cloud client"
                )

            try:
                _chroma_client = chromadb.HttpClient(
                    host="api.trychroma.com",
                    ssl=True,  # Always use SSL for cloud
                    tenant=args.tenant,
                    database=args.database,
                    headers={"x-chroma-token": args.api_key},
                )
            except ssl.SSLError as e:
                logger.info(f"SSL connection failed: {str(e)}")
                raise
            except Exception as e:
                logger.info(f"Error connecting to cloud client: {str(e)}")
                raise

        elif args.client_type == "persistent":
            # Use persistent client with SQLite backend
            if not args.data_dir:
                raise ValueError(
                    "Data directory must be provided via --data-dir flag when using persistent client"
                )
            # ChromaDB persistent client uses SQLite by default if available
            _chroma_client = chromadb.PersistentClient(path=args.data_dir)
        else:  # ephemeral
            _chroma_client = chromadb.EphemeralClient()

    return _chroma_client


##### Collection Tools #####
@mcp.tool()
async def echo(message: str) -> str:
    """Phản hồi lại thông điệp đầu vào (hữu ích để kiểm tra)."""
    return f"Echo: {message}"


@mcp.tool()
async def list_collections(
    limit: int | None = None, offset: int | None = None
) -> List[str]:
    """Liệt kê tất cả các tên collection trong cơ sở dữ liệu Chroma với hỗ trợ phân trang.

    Tham số:
        limit: Số lượng tối đa các collection cần trả về (tùy chọn).
        offset: Số lượng collection cần bỏ qua trước khi trả về kết quả (tùy chọn).

    Trả về:
        Danh sách các tên collection hoặc ["__NO_COLLECTIONS_FOUND__"] nếu cơ sở dữ liệu trống.
    """
    client = get_chroma_client()
    try:
        colls = client.list_collections(limit=limit, offset=offset)
        # Safe handling: If colls is None or empty, return a special marker
        if not colls:
            return ["__NO_COLLECTIONS_FOUND__"]
        # Otherwise iterate to get collection names
        return [coll.name for coll in colls]

    except Exception as e:
        raise Exception(f"Failed to list collections: {str(e)}") from e


@mcp.tool()
async def create_collection(
    collection_name: str,
    embedding_function_name: str = "default",
    metadata: Dict | None = None,
    space: str | None = None,
    ef_construction: int | None = None,
    ef_search: int | None = None,
    max_neighbors: int | None = None,
    num_threads: int | None = None,
    batch_size: int | None = None,
    sync_threshold: int | None = None,
    resize_factor: float | None = None,
) -> str:
    """Tạo một collection mới trong Chroma với các tham số HNSW có thể cấu hình.

    Tham số:
        collection_name: Tên của collection cần tạo.
        space: Hàm khoảng cách được sử dụng trong chỉ mục HNSW. Các tùy chọn: 'l2', 'ip', 'cosine'.
        ef_construction: Kích thước danh sách ứng viên động để xây dựng đồ thị HNSW.
        ef_search: Kích thước danh sách ứng viên động để tìm kiếm trong đồ thị HNSW.
        max_neighbors: Số lượng hàng xóm tối đa được xem xét trong quá trình xây dựng đồ thị HNSW.
        num_threads: Số lượng luồng được sử dụng trong quá trình xây dựng HNSW.
        batch_size: Số lượng phần tử được xử lý cùng lúc trong quá trình xây dựng chỉ mục.
        sync_threshold: Số lượng phần tử cần xử lý trước khi đồng bộ chỉ mục với đĩa.
        resize_factor: Hệ số mở rộng chỉ mục khi nó đầy.
        embedding_function_name: Tên của hàm nhúng được sử dụng. Các tùy chọn: 'default', 'nomic', 'nomic_vietnamese'.
        metadata: Từ điển metadata tùy chọn để thêm vào collection.
    """
    client = get_chroma_client()

    embedding_function = mcp_known_embedding_functions[embedding_function_name]
    hnsw_config = CreateHNSWConfiguration()
    if space:
        if space in ("l2", "ip", "cosine"):
            hnsw_config["space"] = space
        else:
            raise ValueError("space must be one of: 'l2', 'ip', 'cosine'")
    if ef_construction:
        hnsw_config["ef_construction"] = ef_construction
    if ef_search:
        hnsw_config["ef_search"] = ef_search
    if max_neighbors:
        hnsw_config["max_neighbors"] = max_neighbors
    if num_threads:
        hnsw_config["num_threads"] = num_threads
    if batch_size:
        hnsw_config["batch_size"] = batch_size
    if sync_threshold:
        hnsw_config["sync_threshold"] = sync_threshold
    if resize_factor:
        hnsw_config["resize_factor"] = resize_factor

    configuration = CreateCollectionConfiguration(
        hnsw=hnsw_config, embedding_function=embedding_function
    )

    try:
        client.create_collection(
            name=collection_name, configuration=configuration, metadata=metadata
        )
        config_msg = f" with configuration: {configuration}"
        return f"Successfully created collection {collection_name}{config_msg}"
    except Exception as e:
        raise Exception(
            f"Failed to create collection '{collection_name}': {str(e)}"
        ) from e


@mcp.tool()
async def peek_collection(collection_name: str, limit: int = 5) -> Dict:
    """Xem trước các tài liệu trong một collection của Chroma.

    Tham số:
        collection_name: Tên của collection cần xem trước.
        limit: Số lượng tài liệu cần xem trước.
    """
    client = get_chroma_client()
    try:
        collection = client.get_collection(collection_name)
        results = collection.peek(limit=limit)
        # Convert GetResult to dict for type compatibility
        return dict(results)
    except Exception as e:
        raise Exception(
            f"Failed to peek collection '{collection_name}': {str(e)}"
        ) from e


@mcp.tool()
async def get_collection_info(collection_name: str) -> Dict:
    """Lấy thông tin về một collection trong Chroma.

    Tham số:
        collection_name: Tên của collection cần lấy thông tin.
    """
    client = get_chroma_client()
    try:
        collection = client.get_collection(collection_name)

        # Get collection count
        count = collection.count()

        # Peek at a few documents
        peek_results = collection.peek(limit=3)

        return {
            "name": collection_name,
            "count": count,
            "sample_documents": peek_results,
        }
    except Exception as e:
        raise Exception(
            f"Failed to get collection info for '{collection_name}': {str(e)}"
        ) from e


@mcp.tool()
async def get_collection_count(collection_name: str) -> int:
    """Lấy số lượng tài liệu trong một collection của Chroma.

    Tham số:
        collection_name: Tên của collection cần đếm.
    """
    client = get_chroma_client()
    try:
        collection = client.get_collection(collection_name)
        return collection.count()
    except Exception as e:
        raise Exception(
            f"Failed to get collection count for '{collection_name}': {str(e)}"
        ) from e


@mcp.tool()
async def modify_collection(
    collection_name: str,
    new_name: str | None = None,
    new_metadata: Dict | None = None,
    ef_search: int | None = None,
    num_threads: int | None = None,
    batch_size: int | None = None,
    sync_threshold: int | None = None,
    resize_factor: float | None = None,
) -> str:
    """Chỉnh sửa tên hoặc metadata của một collection trong Chroma.

    Tham số:
        collection_name: Tên của collection cần chỉnh sửa.
        new_name: Tên mới cho collection (tùy chọn).
        new_metadata: Metadata mới cho collection (tùy chọn).
        ef_search: Kích thước danh sách ứng viên động để tìm kiếm trong đồ thị HNSW.
        num_threads: Số lượng luồng được sử dụng trong quá trình xây dựng HNSW.
        batch_size: Số lượng phần tử được xử lý cùng lúc trong quá trình xây dựng chỉ mục.
        sync_threshold: Số lượng phần tử cần xử lý trước khi đồng bộ chỉ mục với đĩa.
        resize_factor: Hệ số mở rộng chỉ mục khi nó đầy.
    """
    client = get_chroma_client()
    try:
        collection = client.get_collection(collection_name)

        hnsw_config = UpdateHNSWConfiguration()
        if ef_search:
            hnsw_config["ef_search"] = ef_search
        if num_threads:
            hnsw_config["num_threads"] = num_threads
        if batch_size:
            hnsw_config["batch_size"] = batch_size
        if sync_threshold:
            hnsw_config["sync_threshold"] = sync_threshold
        if resize_factor:
            hnsw_config["resize_factor"] = resize_factor

        configuration = UpdateCollectionConfiguration(hnsw=hnsw_config)
        collection.modify(
            name=new_name, configuration=configuration, metadata=new_metadata
        )

        modified_aspects = []
        if new_name:
            modified_aspects.append("name")
        if new_metadata:
            modified_aspects.append("metadata")
        if ef_search or num_threads or batch_size or sync_threshold or resize_factor:
            modified_aspects.append("hnsw")

        return f"Successfully modified collection {collection_name}: updated {' and '.join(modified_aspects)}"
    except Exception as e:
        raise Exception(
            f"Failed to modify collection '{collection_name}': {str(e)}"
        ) from e


@mcp.tool()
async def delete_collection(collection_name: str) -> str:
    """Xóa một collection trong Chroma.

    Tham số:
        collection_name: Tên của collection cần xóa.
    """
    client = get_chroma_client()
    try:
        client.delete_collection(collection_name)
        return f"Successfully deleted collection {collection_name}"
    except Exception as e:
        raise Exception(
            f"Failed to delete collection '{collection_name}': {str(e)}"
        ) from e


##### Document Tools #####
@mcp.tool()
async def add_documents(
    collection_name: str,
    documents: List[str],
    ids: List[str],
    metadatas: OneOrMany[Metadata] | None = None,
) -> str:
    """Thêm tài liệu vào một collection của Chroma, đảm bảo thực hiện embedding nếu cần.

    Tham số:
        collection_name: Tên của collection cần thêm tài liệu.
        documents: Danh sách các tài liệu văn bản cần thêm.
        ids: Danh sách các ID cho các tài liệu (bắt buộc).
        metadatas: Danh sách metadata tùy chọn cho mỗi tài liệu.
    """
    if not documents:
        raise ValueError("The 'documents' list cannot be empty.")

    if not ids:
        raise ValueError("The 'ids' list is required and cannot be empty.")

    if any(not id.strip() for id in ids):
        raise ValueError("IDs cannot be empty strings.")

    if len(ids) != len(documents):
        raise ValueError(
            f"Number of ids ({len(ids)}) must match number of documents ({len(documents)})."
        )

    client = get_chroma_client()
    try:
        collection = client.get_or_create_collection(collection_name)

        # Check for duplicate IDs
        existing_ids = collection.get(include=[])["ids"]
        duplicate_ids = [id for id in ids if id in existing_ids]
        if duplicate_ids:
            raise ValueError(
                f"The following IDs already exist in collection '{collection_name}': {duplicate_ids}. "
                f"Use 'update_documents' to update existing documents."
            )

        # Check for embedding_function
        use_embedding = getattr(collection, "embedding_function", None)
        if use_embedding:
            # Collection có embedding function, để ChromaDB tự động xử lý
            logger.info(
                f"Using collection's built-in embedding function for {len(documents)} documents"
            )
            result = collection.add(documents=documents, metadatas=metadatas, ids=ids)
        else:
            # Manually compute embeddings sử dụng default embedding function
            logger.info(f"Computing embeddings manually for {len(documents)} documents")
            embedding_fn = mcp_known_embedding_functions["default"]
            embeddings = embedding_fn(documents)
            result = collection.add(
                documents=documents, metadatas=metadatas, ids=ids, embeddings=embeddings
            )

        # Process result
        if result and isinstance(result, dict):
            if "success" in result and not result["success"]:
                raise Exception(
                    f"Failed to add documents: {result.get('error', 'Unknown error')}"
                )
            if "count" in result:
                return f"Successfully added {result['count']} documents to collection {collection_name}"

        return f"Successfully added {len(documents)} documents to collection {collection_name}, result is {result}"
    except Exception as e:
        raise Exception(
            f"Failed to add documents to collection '{collection_name}': {str(e)}"
        ) from e


@mcp.tool()
async def query_documents(
    collection_name: str,
    query_texts: List[str],
    n_results: int = 5,
    where: Dict | None = None,
    where_document: Dict | None = None,
    include: List[str] = ["documents", "metadatas", "distances"],
) -> Dict:
    """Truy vấn tài liệu từ một collection của Chroma với các bộ lọc nâng cao.

    Tham số:
        collection_name: Tên của collection cần truy vấn.
        query_texts: Danh sách các văn bản truy vấn để tìm kiếm.
        n_results: Số lượng kết quả cần trả về cho mỗi truy vấn.
        where: Bộ lọc metadata tùy chọn sử dụng các toán tử truy vấn của Chroma.
               Ví dụ:
               - So sánh đơn giản: {"metadata_field": "value"}
               - So sánh: {"metadata_field": {"$gt": 5}}
               - AND logic: {"$and": [{"field1": {"$eq": "value1"}}, {"field2": {"$gt": 5}}]}
               - OR logic: {"$or": [{"field1": {"$eq": "value1"}}, {"field1": {"$eq": "value2"}}]}
        where_document: Bộ lọc nội dung tài liệu tùy chọn.
        include: Danh sách các thông tin cần bao gồm trong kết quả. Mặc định bao gồm tài liệu, metadata và khoảng cách.
    """
    if not query_texts:
        raise ValueError("The 'query_texts' list cannot be empty.")

    client = get_chroma_client()
    try:
        collection = client.get_collection(collection_name)
        results = collection.query(
            query_texts=query_texts,
            n_results=n_results,
            where=where,
            where_document=where_document,
            include=include,  # type: ignore
        )
        return dict(results)  # Convert QueryResult to dict
    except Exception as e:
        raise Exception(
            f"Failed to query documents from collection '{collection_name}': {str(e)}"
        ) from e


@mcp.tool()
async def get_documents(
    collection_name: str,
    ids: List[str] | None = None,
    where: Dict | None = None,
    where_document: Dict | None = None,
    include: List[str] = ["documents", "metadatas"],
    limit: int | None = None,
    offset: int | None = None,
) -> Dict:
    """Lấy tài liệu từ một collection của Chroma với các bộ lọc tùy chọn.

    Tham số:
        collection_name: Tên của collection cần lấy tài liệu.
        ids: Danh sách các ID tài liệu cần lấy (tùy chọn).
        where: Bộ lọc metadata tùy chọn sử dụng các toán tử truy vấn của Chroma.
               Ví dụ:
               - So sánh đơn giản: {"metadata_field": "value"}
               - So sánh: {"metadata_field": {"$gt": 5}}
               - AND logic: {"$and": [{"field1": {"$eq": "value1"}}, {"field2": {"$gt": 5}}]}
               - OR logic: {"$or": [{"field1": {"$eq": "value1"}}, {"field1": {"$eq": "value2"}}]}
        where_document: Bộ lọc nội dung tài liệu tùy chọn.
        include: Danh sách các thông tin cần bao gồm trong kết quả. Mặc định bao gồm tài liệu và metadata.
        limit: Số lượng tài liệu tối đa cần trả về (tùy chọn).
        offset: Số lượng tài liệu cần bỏ qua trước khi trả về kết quả (tùy chọn).

    Trả về:
        Từ điển chứa các tài liệu phù hợp, ID của chúng và các thông tin được yêu cầu.
    """
    client = get_chroma_client()
    try:
        collection = client.get_collection(collection_name)
        results = collection.get(
            ids=ids,
            where=where,
            where_document=where_document,
            include=include,  # type: ignore
            limit=limit,
            offset=offset,
        )
        return dict(results)  # Convert GetResult to dict
    except Exception as e:
        raise Exception(
            f"Failed to get documents from collection '{collection_name}': {str(e)}"
        ) from e


@mcp.tool()
async def update_documents(
    collection_name: str,
    ids: List[str],
    embeddings: List[List[float]] | None = None,
    metadatas: List[Dict] | None = None,
    documents: List[str] | None = None,
) -> str:
    """Cập nhật tài liệu trong một collection của Chroma.

    Tham số:
        collection_name: Tên của collection cần cập nhật tài liệu.
        ids: Danh sách các ID tài liệu cần cập nhật (bắt buộc).
        embeddings: Danh sách nhúng mới cho các tài liệu (tùy chọn).
        metadatas: Danh sách metadata mới cho các tài liệu (tùy chọn).
        documents: Danh sách các tài liệu văn bản mới (tùy chọn).

    Trả về:
        Thông báo xác nhận số lượng tài liệu đã được cập nhật.

    Ngoại lệ:
        ValueError: Nếu 'ids' trống hoặc không có 'embeddings', 'metadatas', hoặc 'documents' được cung cấp.
        Exception: Nếu collection không tồn tại hoặc nếu thao tác cập nhật thất bại.
    """
    if not ids:
        raise ValueError("The 'ids' list cannot be empty.")

    if embeddings is None and metadatas is None and documents is None:
        raise ValueError(
            "At least one of 'embeddings', 'metadatas', or 'documents' "
            "must be provided for update."
        )

    # Ensure provided lists match the length of ids if they are not None
    if embeddings is not None and len(embeddings) != len(ids):
        raise ValueError("Length of 'embeddings' list must match length of 'ids' list.")
    if metadatas is not None and len(metadatas) != len(ids):
        raise ValueError("Length of 'metadatas' list must match length of 'ids' list.")
    if documents is not None and len(documents) != len(ids):
        raise ValueError("Length of 'documents' list must match length of 'ids' list.")

    client = get_chroma_client()
    try:
        collection = client.get_collection(collection_name)
    except Exception as e:
        raise Exception(
            f"Failed to get collection '{collection_name}': {str(e)}"
        ) from e

    # Prepare arguments for update, excluding None values at the top level
    update_args = {
        "ids": ids,
        "embeddings": embeddings,
        "metadatas": metadatas,
        "documents": documents,
    }
    kwargs = {k: v for k, v in update_args.items() if v is not None}

    try:
        collection.update(**kwargs)
        return (
            f"Successfully processed update request for {len(ids)} documents in "
            f"collection '{collection_name}'. Note: Non-existent IDs are ignored by ChromaDB."
        )
    except Exception as e:
        raise Exception(
            f"Failed to update documents in collection '{collection_name}': {str(e)}"
        ) from e


@mcp.tool()
async def delete_documents(collection_name: str, ids: List[str]) -> str:
    """Xóa tài liệu khỏi một collection của Chroma.

    Tham số:
        collection_name: Tên của collection cần xóa tài liệu.
        ids: Danh sách các ID tài liệu cần xóa.
    """
    if not ids:
        raise ValueError("The 'ids' list cannot be empty.")

    client = get_chroma_client()
    try:
        collection = client.get_collection(collection_name)
    except Exception as e:
        raise Exception(
            f"Failed to get collection '{collection_name}': {str(e)}"
        ) from e

    try:
        collection.delete(ids=ids)
        return (
            f"Successfully deleted {len(ids)} documents from "
            f"collection '{collection_name}'. Note: Non-existent IDs are ignored by ChromaDB."
        )
    except Exception as e:
        raise Exception(
            f"Failed to delete documents from collection '{collection_name}': {str(e)}"
        ) from e


def validate_thought_data(input_data: Dict) -> Dict:
    """Validate thought data structure."""
    if not input_data.get("sessionId"):
        raise ValueError("Invalid sessionId: must be provided")
    if not input_data.get("thought") or not isinstance(input_data.get("thought"), str):
        raise ValueError("Invalid thought: must be a string")
    if not input_data.get("thoughtNumber") or not isinstance(
        input_data.get("thoughtNumber"), int
    ):
        raise ValueError("Invalid thoughtNumber: must be a number")
    if not input_data.get("totalThoughts") or not isinstance(
        input_data.get("totalThoughts"), int
    ):
        raise ValueError("Invalid totalThoughts: must be a number")
    if not isinstance(input_data.get("nextThoughtNeeded"), bool):
        raise ValueError("Invalid nextThoughtNeeded: must be a boolean")

    return {
        "sessionId": input_data.get("sessionId"),
        "thought": input_data.get("thought"),
        "thoughtNumber": input_data.get("thoughtNumber"),
        "totalThoughts": input_data.get("totalThoughts"),
        "nextThoughtNeeded": input_data.get("nextThoughtNeeded"),
        "isRevision": input_data.get("isRevision"),
        "revisesThought": input_data.get("revisesThought"),
        "branchFromThought": input_data.get("branchFromThought"),
        "branchId": input_data.get("branchId"),
        "needsMoreThoughts": input_data.get("needsMoreThoughts"),
    }


def process_thought(input_data: Dict) -> Dict:
    """Process a new thought."""
    try:
        # Validate input data
        validated_input = validate_thought_data(input_data)

        # Adjust total thoughts if needed
        if validated_input["thoughtNumber"] > validated_input["totalThoughts"]:
            validated_input["totalThoughts"] = validated_input["thoughtNumber"]

        # Return response
        return {
            "sessionId": validated_input["sessionId"],
            "thoughtNumber": validated_input["thoughtNumber"],
            "totalThoughts": validated_input["totalThoughts"],
            "nextThoughtNeeded": validated_input["nextThoughtNeeded"],
        }

    except Exception as e:
        return {"error": str(e), "status": "failed"}


# Initialize embedding functions dictionary
# Generated by Copilot
mcp_known_embedding_functions: Dict[str, EmbeddingFunction] = {
    # "default": DefaultEmbeddingFunction(),
    # "nomic": NomicEmbeddingFunction(),
    "default": NomicVietnameseEmbeddingFunction(),
}


def main():
    """Main entry point for the MCP server."""
    parser = create_parser()
    args = parser.parse_args()
    try:
        get_chroma_client(args)
        logger.info("Loading Chroma client...")
        logger.info(f"{str(args)}")
    except Exception as e:
        logger.info(f"Failed to initialize Chroma client: {str(e)}")
        raise

    # Initialize and run the server
    logger.info("Starting MCP server")
    mcp.run(transport="stdio")


if __name__ == "__main__":
    main()
