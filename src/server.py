# Generated by Copilot
import sys
import json
from chromadb import Client
from chromadb.config import Settings

class MCPServer:
    def __init__(self):
        self.client = Client(Settings())

    def handle_request(self, request: dict) -> dict:
        """
        Handle incoming MCP requests.

        Args:
            request (dict): The incoming request as a dictionary.

        Returns:
            dict: The response to the request.
        """
        try:
            action = request.get("action")
            if action == "add_document":
                return self.add_document(request)
            elif action == "query":
                return self.query(request)
            else:
                return {"error": "Unknown action"}
        except Exception as e:
            return {"error": str(e)}

    def add_document(self, request: dict) -> dict:
        """
        Add a document to the ChromaDB collection.

        Args:
            request (dict): The request containing document details.

        Returns:
            dict: The result of the operation.
        """
        collection_name = request.get("collection_name")
        document = request.get("document")
        metadata = request.get("metadata", {})

        if not collection_name or not document:
            return {"error": "Missing collection_name or document"}

        collection = self.client.get_or_create_collection(collection_name)
        collection.add(document, metadata)
        return {"status": "success"}

    def query(self, request: dict) -> dict:
        """
        Query a ChromaDB collection.

        Args:
            request (dict): The request containing query details.

        Returns:
            dict: The query results.
        """
        collection_name = request.get("collection_name")
        query_text = request.get("query_text")

        if not collection_name or not query_text:
            return {"error": "Missing collection_name or query_text"}

        collection = self.client.get_collection(collection_name)
        results = collection.query(query_text)
        return {"results": results}

    def run(self):
        """
        Start the MCP server to handle requests over stdio.
        """
        for line in sys.stdin:
            try:
                request = json.loads(line)
                response = self.handle_request(request)
                sys.stdout.write(json.dumps(response) + "\n")
                sys.stdout.flush()
            except json.JSONDecodeError:
                sys.stdout.write(json.dumps({"error": "Invalid JSON"}) + "\n")
                sys.stdout.flush()

if __name__ == "__main__":
    server = MCPServer()
    server.run()