# Generated by Copilot
"""
Hugging Face authentication module for MCP server.
Handles token detection and model access validation.
"""

import os
import logging
from typing import Optional

logger = logging.getLogger(__name__)


class HuggingFaceAuth:
    """
    Handles Hugging Face authentication for embedding models.
    """

    @staticmethod
    def setup_token() -> Optional[str]:
        """
        Setup Hugging Face token từ nhiều nguồn khác nhau.
        
        Returns:
            Valid HF token or None
        """
        # Thử nhiều cách để lấy HF_TOKEN
        token_sources = [
            os.getenv("HF_TOKEN"),
            os.getenv("HUGGINGFACE_TOKEN"),
            os.getenv("HUGGINGFACE_HUB_TOKEN"),
        ]

        # Thử đọc từ file .env nếu có
        try:
            if os.path.exists(".env"):
                with open(".env", "r") as f:
                    for line in f:
                        if line.strip().startswith("HF_TOKEN="):
                            token_sources.append(line.strip().split("=", 1)[1])
        except Exception as e:
            logger.debug(f"Could not read .env file: {e}")

        # Thử đọc từ file token.txt nếu có
        try:
            if os.path.exists("token.txt"):
                with open("token.txt", "r") as f:
                    token_content = f.read().strip()
                    if token_content and not token_content.startswith("hf_example"):
                        token_sources.append(token_content)
        except Exception as e:
            logger.debug(f"Could not read token.txt file: {e}")

        # Tìm token đầu tiên không rỗng và valid
        for token in token_sources:
            if token and token.strip() and not token.startswith("hf_example"):
                logger.info(f"✅ Found HF_TOKEN: {token[:10]}...")
                # Set vào environment để sentence-transformers sử dụng
                os.environ["HF_TOKEN"] = token.strip()
                os.environ["HUGGINGFACE_HUB_TOKEN"] = token.strip()
                return token.strip()

        logger.warning("❌ No valid HF_TOKEN found")
        return None

    @staticmethod
    def validate_model_access(model_name: str) -> bool:
        """
        Validate if we can access a specific model.
        
        Args:
            model_name: Name of the model to check
            
        Returns:
            True if model is accessible
        """
        try:
            from huggingface_hub import model_info
            
            token = HuggingFaceAuth.setup_token()
            if token:
                # Try to get model info with token
                info = model_info(model_name, token=token)
                return True
            else:
                # Try without token (public models)
                info = model_info(model_name)
                return True
        except Exception as e:
            logger.warning(f"Cannot access model {model_name}: {e}")
            return False
