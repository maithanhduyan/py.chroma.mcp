# Generated by Copilot
"""
Nomic Embedding Function cho ChromaDB - Tối ưu hóa cho tiếng Việt.
Bắt chước cấu trúc của ChromaDB embedding functions.
"""

from typing import Dict, Any, List, Optional, cast
import logging
import unicodedata
import re
import numpy as np

try:
    from sentence_transformers import SentenceTransformer

    SENTENCE_TRANSFORMERS_AVAILABLE = True
except ImportError:
    SENTENCE_TRANSFORMERS_AVAILABLE = False

from chromadb.api.types import (
    EmbeddingFunction,
    Embeddings,
    Documents,
)

logger = logging.getLogger(__name__)


class NomicVietnameseEmbeddingFunction(EmbeddingFunction[Documents]):
    """
    Nomic Embedding Function tối ưu hóa cho văn bản tiếng Việt.
    Sử dụng model 'nomic-ai/nomic-embed-text-v2-moe' với preprocessing đặc biệt cho tiếng Việt.
    """

    def __init__(
        self,
        model_name: str = "nomic-ai/nomic-embed-text-v2-moe",
        normalize_embeddings: bool = True,
        trust_remote_code: bool = True,
        device: Optional[str] = None,
        batch_size: int = 32,
        max_seq_length: Optional[int] = None,
        vietnamese_preprocessing: bool = True,
    ) -> None:
        """
        Khởi tạo Nomic Embedding Function.

        Args:
            model_name: Tên model Nomic để sử dụng
            normalize_embeddings: Có normalize embeddings không
            trust_remote_code: Có tin tưởng remote code không
            device: Device để chạy model (auto-detect nếu None)
            batch_size: Batch size để xử lý
            max_seq_length: Độ dài sequence tối đa
            vietnamese_preprocessing: Có áp dụng preprocessing tiếng Việt không
        """
        if not SENTENCE_TRANSFORMERS_AVAILABLE:
            raise ImportError(
                "sentence-transformers is required for NomicVietnameseEmbeddingFunction. "
                "Install it with: uv add sentence-transformers"
            )

        self._model_name = model_name
        self._normalize_embeddings = normalize_embeddings
        self._trust_remote_code = trust_remote_code
        self._device = device
        self._batch_size = batch_size
        self._max_seq_length = max_seq_length
        self._vietnamese_preprocessing = vietnamese_preprocessing
        self._model = None

        # Lazy loading của model
        self._load_model()

    def _load_model(self) -> None:
        """Load model một cách lazy."""
        if self._model is None:
            try:
                self._model = SentenceTransformer(
                    self._model_name,
                    trust_remote_code=self._trust_remote_code,
                    device=self._device,
                )

                if self._max_seq_length:
                    self._model.max_seq_length = self._max_seq_length

                logger.info(f"Loaded Nomic model: {self._model_name}")

            except Exception as e:
                logger.error(f"Failed to load Nomic model: {e}")
                raise RuntimeError(f"Could not load model {self._model_name}: {e}")

    def _preprocess_vietnamese_text(self, text: str) -> str:
        """
        Tiền xử lý văn bản tiếng Việt để tối ưu hóa embedding.

        Args:
            text: Văn bản đầu vào

        Returns:
            Văn bản đã được tiền xử lý
        """
        if not text or not self._vietnamese_preprocessing:
            return text

        # Unicode normalization (NFC)
        text = unicodedata.normalize("NFC", text)

        # Loại bỏ zero-width characters
        text = re.sub(r"[\u200b-\u200d\ufeff]", "", text)

        # Normalize quotation marks
        text = re.sub(r'["""]', '"', text)
        text = re.sub(r"[''']", "'", text)

        # Normalize dashes
        text = re.sub(r"[–—]", "-", text)

        # Normalize ellipsis
        text = re.sub(r"…", "...", text)

        # Collapse multiple whitespace
        text = re.sub(r"\s+", " ", text)

        # Normalize line breaks
        text = re.sub(r"\n\s*\n", "\n\n", text)

        return text.strip()

    def __call__(self, input: Documents) -> Embeddings:
        """
        Tạo embeddings cho documents.

        Args:
            input: Danh sách documents cần embedding

        Returns:
            Danh sách embeddings
        """
        if not input:
            return []
        # Ensure model is loaded
        self._load_model()

        if self._model is None:
            raise RuntimeError("Model is not loaded")

        try:
            # Preprocess Vietnamese text
            processed_texts = [self._preprocess_vietnamese_text(text) for text in input]
            # Generate embeddings
            embeddings = self._model.encode(
                processed_texts,
                normalize_embeddings=self._normalize_embeddings,
                batch_size=self._batch_size,
                show_progress_bar=False,
                convert_to_tensor=False,
                convert_to_numpy=True,
            )  # Convert to list format - force conversion to list of lists
            try:
                # Try to convert the whole array first
                result = embeddings.tolist()
            except (AttributeError, ValueError):
                # Fallback: convert each embedding individually
                result = []
                for embedding in embeddings:
                    if hasattr(embedding, "tolist"):
                        result.append(embedding.tolist())
                    else:
                        result.append([float(x) for x in embedding])

            return cast(Embeddings, result)

        except Exception as e:
            logger.error(f"Failed to generate embeddings: {e}")
            raise RuntimeError(f"Embedding generation failed: {e}")

    @staticmethod
    def build_from_config(config: Dict[str, Any]) -> "NomicVietnameseEmbeddingFunction":
        """
        Tạo instance từ config dictionary.

        Args:
            config: Configuration dictionary

        Returns:
            NomicVietnameseEmbeddingFunction instance
        """
        NomicVietnameseEmbeddingFunction.validate_config(config)

        return NomicVietnameseEmbeddingFunction(
            model_name=config.get("model_name", "nomic-ai/nomic-embed-text-v2-moe"),
            normalize_embeddings=config.get("normalize_embeddings", True),
            trust_remote_code=config.get("trust_remote_code", True),
            device=config.get("device", None),
            batch_size=config.get("batch_size", 32),
            max_seq_length=config.get("max_seq_length", None),
            vietnamese_preprocessing=config.get("vietnamese_preprocessing", True),
        )

    @staticmethod
    def name() -> str:
        """Trả về tên của embedding function."""
        return "nomic_vietnamese"

    def get_config(self) -> Dict[str, Any]:
        """
        Trả về configuration hiện tại.

        Returns:
            Configuration dictionary
        """
        return {
            "model_name": self._model_name,
            "normalize_embeddings": self._normalize_embeddings,
            "trust_remote_code": self._trust_remote_code,
            "device": self._device,
            "batch_size": self._batch_size,
            "max_seq_length": self._max_seq_length,
            "vietnamese_preprocessing": self._vietnamese_preprocessing,
        }

    def max_tokens(self) -> int:
        """
        Trả về số tokens tối đa mà model có thể xử lý.

        Returns:
            Số tokens tối đa
        """
        if self._max_seq_length:
            return self._max_seq_length

        # Default cho Nomic models
        return 8192

    @staticmethod
    def validate_config(config: Dict[str, Any]) -> None:
        """
        Validate configuration dictionary.

        Args:
            config: Configuration để validate

        Raises:
            ValueError: Nếu config không hợp lệ
        """
        if not isinstance(config, dict):
            raise ValueError("Config must be a dictionary")

        # Validate model_name
        model_name = config.get("model_name", "nomic-ai/nomic-embed-text-v2-moe")
        if not isinstance(model_name, str) or not model_name.strip():
            raise ValueError("model_name must be a non-empty string")

        # Validate batch_size
        batch_size = config.get("batch_size", 32)
        if not isinstance(batch_size, int) or batch_size <= 0:
            raise ValueError("batch_size must be a positive integer")

        # Validate max_seq_length
        max_seq_length = config.get("max_seq_length")
        if max_seq_length is not None:
            if not isinstance(max_seq_length, int) or max_seq_length <= 0:
                raise ValueError("max_seq_length must be a positive integer or None")

        # Validate boolean fields
        for field in [
            "normalize_embeddings",
            "trust_remote_code",
            "vietnamese_preprocessing",
        ]:
            value = config.get(field, True)
            if not isinstance(value, bool):
                raise ValueError(f"{field} must be a boolean")

    def __repr__(self) -> str:
        """String representation của class."""
        return (
            f"NomicVietnameseEmbeddingFunction("
            f"model_name='{self._model_name}', "
            f"normalize_embeddings={self._normalize_embeddings}, "
            f"vietnamese_preprocessing={self._vietnamese_preprocessing})"
        )


# Alias cho backward compatibility
NomicEmbeddingFunction = NomicVietnameseEmbeddingFunction
