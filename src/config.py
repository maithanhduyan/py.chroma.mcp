"""
Configuration module for the MCP server.
Generated by Copilot
"""

import os
from typing import Dict, Any, Optional


class MCPConfig:
    """
    Configuration class for MCP server settings.
    """

    def __init__(self):
        """Initialize configuration with default values and environment overrides."""
        self.server_name = "py-chroma-mcp"
        self.server_version = "0.1.0"
        self.protocol_version = "2024-11-05"

        # ChromaDB configuration
        self.chroma_host = os.getenv("CHROMA_HOST", "localhost")
        self.chroma_port = int(os.getenv("CHROMA_PORT", "8000"))
        self.chroma_database_path = os.getenv("CHROMA_DB_PATH", "./chroma_db")

        # Embedding configuration
        self.default_embedding_model = os.getenv("DEFAULT_EMBEDDING_MODEL", "mixedbread-ai/mxbai-embed-large-v1")
        self.enable_custom_embeddings = os.getenv("ENABLE_CUSTOM_EMBEDDINGS", "true").lower() == "true"
        self.embedding_chunk_size = int(os.getenv("EMBEDDING_CHUNK_SIZE", "400"))
        self.embedding_chunk_overlap = int(os.getenv("EMBEDDING_CHUNK_OVERLAP", "50"))

        # Server capabilities
        self.capabilities = {
            "tools": {"listChanged": False},
            "resources": {"subscribe": False, "listChanged": False},
            "prompts": {"listChanged": False},
        }

    def get_server_info(self) -> Dict[str, Any]:
        """
        Get server information for MCP initialization.

        Returns:
            Server info dictionary
        """
        return {"name": self.server_name, "version": self.server_version}

    def get_capabilities(self) -> Dict[str, Any]:
        """
        Get server capabilities for MCP initialization.

        Returns:
            Capabilities dictionary
        """
        return self.capabilities

    def get_chroma_config(self) -> Dict[str, Any]:
        """
        Get ChromaDB configuration.

        Returns:
            ChromaDB configuration dictionary
        """
        return {
            "host": self.chroma_host,
            "port": self.chroma_port,
            "database_path": self.chroma_database_path,
        }

    def get_embedding_config(self) -> Dict[str, Any]:
        """
        Get embedding configuration.

        Returns:
            Embedding configuration dictionary
        """
        return {
            "default_model": self.default_embedding_model,
            "enable_custom_embeddings": self.enable_custom_embeddings,
            "chunk_size": self.embedding_chunk_size,
            "chunk_overlap": self.embedding_chunk_overlap,
        }
