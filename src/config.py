"""
Simple configuration module for the MCP server.
Generated by Copilot
"""

import os
import sys
from pathlib import Path
from typing import Dict, Any

# Flag to prevent multiple path setup
_paths_setup = False


def setup_project_paths() -> Path:
    """Setup Python path for the project. Returns project root directory."""
    global _paths_setup

    if _paths_setup:
        return Path(__file__).resolve().parent.parent

    # Get the project root (parent of src directory)
    current_file = Path(__file__).resolve()
    src_dir = current_file.parent  # src directory
    project_root = src_dir.parent  # project root directory

    # Add src directory to Python path if not already there
    src_path = str(src_dir)
    if src_path not in sys.path:
        sys.path.insert(0, src_path)

    _paths_setup = True
    return project_root


# Initialize paths when module is imported (only once)
PROJECT_ROOT = setup_project_paths()


# Default configuration constants
DEFAULT_EMBEDDING_MODEL = "nomic-ai/nomic-embed-text-v2-moe"  # Latest MoE version, SoTA multilingual (305M active/475M total), 768D embeddings
FALLBACK_EMBEDDING_MODELS = [
    "nomic-ai/nomic-embed-text-v2-moe",  # Primary model - Latest MoE version, SoTA multilingual
]
DEFAULT_CHUNK_SIZE = 400
DEFAULT_CHUNK_OVERLAP = 50
DEFAULT_CHROMA_DB_PATH = "./chroma_db"


def get_embedding_config() -> Dict[str, Any]:
    """Get embedding configuration with default values and environment overrides."""
    return {
        "default_model": os.getenv("DEFAULT_EMBEDDING_MODEL", DEFAULT_EMBEDDING_MODEL),
        "fallback_models": FALLBACK_EMBEDDING_MODELS,
        "chunk_size": int(os.getenv("EMBEDDING_CHUNK_SIZE", str(DEFAULT_CHUNK_SIZE))),
        "chunk_overlap": int(
            os.getenv("EMBEDDING_CHUNK_OVERLAP", str(DEFAULT_CHUNK_OVERLAP))
        ),
        "enable_custom_embeddings": os.getenv(
            "ENABLE_CUSTOM_EMBEDDINGS", "true"
        ).lower()
        == "true",
    }


def get_chroma_config() -> Dict[str, Any]:
    """Get ChromaDB configuration with default values."""
    return {
        "database_path": os.getenv("CHROMA_DB_PATH", DEFAULT_CHROMA_DB_PATH),
        "host": os.getenv("CHROMA_HOST", "localhost"),
        "port": int(os.getenv("CHROMA_PORT", "8000")),
    }
