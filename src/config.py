"""
Simple configuration module for the MCP server.
Generated by Copilot

ASYNC HANDLING NOTES:
- FastMCP manages its own asyncio event loop internally
- Do NOT wrap mcp.run() in asyncio.run() - this causes conflicts
- All @mcp.tool() functions are async by design
- Server initialization should be synchronous, letting FastMCP handle async
- This prevents "cannot be called from a running event loop" errors

GPU/CPU DEVICE HANDLING:
- EmbeddingManager automatically detects best available device (CUDA, MPS, CPU)
- Models are loaded with appropriate device settings for optimal performance
- Fallback to CPU if GPU not available or fails
- Device information shown in model info for transparency

MODEL SELECTION OPTIMIZATION:
- Model priority list ordered by size/speed (fastest first)
- Size information provided to help users choose appropriate models
- Progress indication for long downloads
- Local caching to speed up subsequent loads
"""

import os
import sys
from pathlib import Path
from typing import Dict, Any

# Flag to prevent multiple path setup
_paths_setup = False


def setup_project_paths() -> Path:
    """
    Setup Python path for the project to enable absolute imports.
    Only runs once to prevent circular imports.

    Returns:
        Path to the project root directory
    """
    global _paths_setup

    if _paths_setup:
        return Path(__file__).resolve().parent.parent

    # Get the project root (parent of src directory)
    current_file = Path(__file__).resolve()
    src_dir = current_file.parent  # src directory
    project_root = src_dir.parent  # project root directory

    # Add src directory to Python path if not already there
    src_path = str(src_dir)
    if src_path not in sys.path:
        sys.path.insert(0, src_path)

    _paths_setup = True
    return project_root


# Initialize paths when module is imported (only once)
PROJECT_ROOT = setup_project_paths()


# Default configuration constants
DEFAULT_EMBEDDING_MODEL = (
    "nomic-ai/nomic-embed-text-v1.5"  # Lightweight, no token required
)
DEFAULT_CHUNK_SIZE = 400
DEFAULT_CHUNK_OVERLAP = 50
DEFAULT_CHROMA_DB_PATH = "./chroma_db"


def get_embedding_config() -> Dict[str, Any]:
    """
    Get embedding configuration with default values and environment overrides.

    Returns:
        Dictionary containing embedding configuration:
        - default_model: Default embedding model to use
        - chunk_size: Size of text chunks for embedding
        - chunk_overlap: Overlap between chunks
        - enable_custom_embeddings: Whether to allow custom embedding models
    """
    return {
        "default_model": os.getenv("DEFAULT_EMBEDDING_MODEL", DEFAULT_EMBEDDING_MODEL),
        "chunk_size": int(os.getenv("EMBEDDING_CHUNK_SIZE", str(DEFAULT_CHUNK_SIZE))),
        "chunk_overlap": int(
            os.getenv("EMBEDDING_CHUNK_OVERLAP", str(DEFAULT_CHUNK_OVERLAP))
        ),
        "enable_custom_embeddings": os.getenv(
            "ENABLE_CUSTOM_EMBEDDINGS", "true"
        ).lower()
        == "true",
    }


def get_chroma_config() -> Dict[str, Any]:
    """
    Get ChromaDB configuration with default values.

    Returns:
        Dictionary containing ChromaDB configuration:
        - database_path: Path to ChromaDB database
        - host: ChromaDB host (for client mode)
        - port: ChromaDB port (for client mode)
    """
    return {
        "database_path": os.getenv("CHROMA_DB_PATH", DEFAULT_CHROMA_DB_PATH),
        "host": os.getenv("CHROMA_HOST", "localhost"),
        "port": int(os.getenv("CHROMA_PORT", "8000")),
    }
