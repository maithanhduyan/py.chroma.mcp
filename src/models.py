# Generated by Copilot
"""
Pydantic models cho ChromaDB MCP server.
Định nghĩa data validation và serialization cho tất cả operations.
"""

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Union, Any, Annotated
from pydantic import BaseModel, Field, validator, ConfigDict, field_validator
import re


class EmbeddingFunctionType(str, Enum):
    """Các loại embedding function được hỗ trợ."""

    DEFAULT = "default"
    NOMIC_VIETNAMESE = "nomic_vietnamese"


class HNSWSpace(str, Enum):
    """Các loại distance function cho HNSW index."""

    L2 = "l2"
    IP = "ip"  # Inner Product
    COSINE = "cosine"


class CollectionMetadata(BaseModel):
    """Metadata cho ChromaDB collection."""

    model_config = ConfigDict(extra="allow")  # Cho phép thêm fields tùy ý

    description: Optional[str] = Field(None, description="Mô tả collection")
    language: Optional[str] = Field(None, description="Ngôn ngữ chính của collection")
    created_at: Optional[datetime] = Field(default_factory=datetime.now)
    version: Optional[str] = Field("1.0", description="Phiên bản collection")


class DocumentMetadata(BaseModel):
    """Metadata cho document trong collection."""

    model_config = ConfigDict(extra="allow")

    title: Optional[str] = Field(None, description="Tiêu đề document")
    language: Optional[str] = Field("vietnamese", description="Ngôn ngữ document")
    chapter: Optional[Union[int, str]] = Field(None, description="Chương/phần")
    theme: Optional[str] = Field(None, description="Chủ đề chính")
    genre: Optional[str] = Field(None, description="Thể loại")
    main_character: Optional[str] = Field(None, description="Nhân vật chính")
    setting: Optional[str] = Field(None, description="Bối cảnh")
    created_at: Optional[datetime] = Field(default_factory=datetime.now)


class CreateCollectionRequest(BaseModel):
    """Request để tạo collection mới."""

    collection_name: str = Field(
        ..., min_length=1, max_length=63, description="Tên collection (1-63 ký tự)"
    )
    embedding_function_name: EmbeddingFunctionType = Field(
        EmbeddingFunctionType.DEFAULT, description="Loại embedding function"
    )
    space: Optional[HNSWSpace] = Field(None, description="Distance function")
    ef_construction: Optional[int] = Field(
        None, ge=1, le=2000, description="HNSW ef_construction parameter"
    )
    ef_search: Optional[int] = Field(
        None, ge=1, le=2000, description="HNSW ef_search parameter"
    )
    max_neighbors: Optional[int] = Field(
        None, ge=1, le=512, description="HNSW max_neighbors parameter"
    )
    metadata: Optional[CollectionMetadata] = Field(
        None, description="Collection metadata"
    )

    @validator("collection_name")
    def validate_collection_name(cls, v):
        """Validate collection name theo quy tắc ChromaDB."""
        if not re.match(r"^[a-zA-Z0-9][a-zA-Z0-9_-]*$", v):
            raise ValueError(
                "Collection name phải bắt đầu bằng chữ/số và chỉ chứa chữ, số, '_', '-'"
            )
        return v


class AddDocumentsRequest(BaseModel):
    """Request để thêm documents vào collection."""

    collection_name: str = Field(..., description="Tên collection")
    documents: Annotated[List[str], Field(min_length=1)] = Field(
        ..., description="Danh sách documents"
    )
    ids: Annotated[List[str], Field(min_length=1)] = Field(
        ..., description="Danh sách IDs"
    )
    metadatas: Optional[List[DocumentMetadata]] = Field(
        None, description="Metadata cho mỗi document"
    )

    @field_validator("ids")
    @classmethod
    def validate_ids_length(cls, v, info):
        """Đảm bảo số lượng IDs khớp với documents."""
        if (
            hasattr(info, "data")
            and "documents" in info.data
            and len(v) != len(info.data["documents"])
        ):
            raise ValueError("Số lượng IDs phải bằng số lượng documents")
        return v

    @field_validator("metadatas")
    @classmethod
    def validate_metadatas_length(cls, v, info):
        """Đảm bảo số lượng metadata khớp với documents."""
        if (
            v is not None
            and hasattr(info, "data")
            and "documents" in info.data
            and len(v) != len(info.data["documents"])
        ):
            raise ValueError("Số lượng metadata phải bằng số lượng documents")
        return v

    @field_validator("ids")
    @classmethod
    def validate_unique_ids(cls, v):
        """Đảm bảo IDs là duy nhất."""
        if len(v) != len(set(v)):
            raise ValueError("IDs phải là duy nhất")
        return v


class QueryDocumentsRequest(BaseModel):
    """Request để query documents."""

    collection_name: str = Field(..., description="Tên collection")
    query_texts: Annotated[List[str], Field(min_length=1)] = Field(
        ..., description="Danh sách query texts"
    )
    n_results: int = Field(5, ge=1, le=100, description="Số lượng kết quả trả về")
    include: List[str] = Field(
        ["documents", "metadatas", "distances"],
        description="Thông tin cần include trong kết quả",
    )
    where: Optional[Dict[str, Any]] = Field(None, description="Metadata filter")
    where_document: Optional[Dict[str, Any]] = Field(
        None, description="Document content filter"
    )

    @field_validator("include")
    @classmethod
    def validate_include(cls, v):
        """Validate include options."""
        valid_options = {"documents", "metadatas", "embeddings", "distances", "uris"}
        invalid = set(v) - valid_options
        if invalid:
            raise ValueError(f"Invalid include options: {invalid}")
        return v


class GetDocumentsRequest(BaseModel):
    """Request để lấy documents."""

    collection_name: str = Field(..., description="Tên collection")
    ids: Optional[List[str]] = Field(None, description="Danh sách IDs cụ thể")
    include: List[str] = Field(
        ["documents", "metadatas"], description="Thông tin cần include"
    )
    limit: Optional[int] = Field(None, ge=1, le=1000, description="Giới hạn số lượng")
    offset: Optional[int] = Field(None, ge=0, description="Offset để pagination")
    where: Optional[Dict[str, Any]] = Field(None, description="Metadata filter")
    where_document: Optional[Dict[str, Any]] = Field(
        None, description="Document content filter"
    )


class UpdateDocumentsRequest(BaseModel):
    """Request để update documents."""

    collection_name: str = Field(..., description="Tên collection")
    ids: Annotated[List[str], Field(min_length=1)] = Field(
        ..., description="Danh sách IDs cần update"
    )
    documents: Optional[List[str]] = Field(None, description="Documents mới")
    metadatas: Optional[List[DocumentMetadata]] = Field(
        None, description="Metadata mới"
    )

    @field_validator("documents")
    @classmethod
    def validate_documents_length(cls, v, info):
        """Validate documents length."""
        if (
            v is not None
            and hasattr(info, "data")
            and "ids" in info.data
            and len(v) != len(info.data["ids"])
        ):
            raise ValueError("Số lượng documents phải bằng số lượng IDs")
        return v

    @validator("metadatas")
    def validate_metadatas_length(cls, v, values):
        """Validate metadata length."""
        if v is not None and "ids" in values and len(v) != len(values["ids"]):
            raise ValueError("Số lượng metadata phải bằng số lượng IDs")
        return v


class DeleteDocumentsRequest(BaseModel):
    """Request để xóa documents."""

    collection_name: str = Field(..., description="Tên collection")
    ids: Annotated[List[str], Field(min_length=1)] = Field(
        ..., description="Danh sách IDs cần xóa"
    )


class CollectionInfo(BaseModel):
    """Thông tin về collection."""

    name: str = Field(..., description="Tên collection")
    count: int = Field(..., ge=0, description="Số lượng documents")
    metadata: Optional[Dict[str, Any]] = Field(None, description="Collection metadata")
    embedding_function: Optional[str] = Field(
        None, description="Embedding function được sử dụng"
    )


class QueryResult(BaseModel):
    """Kết quả query documents."""

    ids: List[List[str]] = Field(..., description="Document IDs")
    documents: Optional[List[List[str]]] = Field(None, description="Document contents")
    metadatas: Optional[List[List[Dict[str, Any]]]] = Field(
        None, description="Document metadata"
    )
    distances: Optional[List[List[float]]] = Field(
        None, description="Similarity distances"
    )
    embeddings: Optional[List[List[List[float]]]] = Field(
        None, description="Document embeddings"
    )


class OperationResponse(BaseModel):
    """Response chung cho các operations."""

    success: bool = Field(..., description="Trạng thái thành công")
    message: str = Field(..., description="Thông báo kết quả")
    data: Optional[Any] = Field(None, description="Dữ liệu trả về")
    error: Optional[str] = Field(None, description="Thông báo lỗi nếu có")


class ValidationError(BaseModel):
    """Lỗi validation."""

    field: str = Field(..., description="Tên field bị lỗi")
    message: str = Field(..., description="Thông báo lỗi")
    value: Optional[Any] = Field(None, description="Giá trị gây lỗi")


# Utility functions
def validate_vietnamese_text(text: str) -> bool:
    """Kiểm tra xem text có chứa ký tự tiếng Việt không."""
    vietnamese_chars = re.compile(
        r"[àáảãạăắằẳẵặâấầẩẫậèéẻẽẹêếềểễệìíỉĩịòóỏõọôốồổỗộơớờởỡợùúủũụưứừửữựỳýỷỹỵđ]"
    )
    return bool(vietnamese_chars.search(text.lower()))


def normalize_collection_name(name: str) -> str:
    """Normalize collection name theo chuẩn ChromaDB."""
    # Chuyển về lowercase và thay thế space bằng underscore
    normalized = re.sub(r"[^a-zA-Z0-9_-]", "_", name.lower())
    # Đảm bảo bắt đầu bằng chữ hoặc số
    if not normalized[0].isalnum():
        normalized = "col_" + normalized
    return normalized
