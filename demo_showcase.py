# Generated by Copilot
"""
🚀 MCP ChromaDB Embedding Integration Demo
Showcase khả năng semantic search tiếng Việt với real data
"""

import logging
from src.tools import MCPTools

# Cài đặt logging để demo clean hơn
logging.basicConfig(level=logging.WARNING)

def demo_vietnamese_semantic_search():
    """Demo comprehensive cho khả năng semantic search tiếng Việt"""
    
    print("🚀 MCP ChromaDB Embedding Integration - Vietnamese Semantic Search Demo")
    print("=" * 80)
    print("🎯 Showcasing: Real Vietnamese content processing & intelligent search")
    print()
    
    # Khởi tạo tools
    print("🔧 Initializing MCP Tools with embedding integration...")
    tools = MCPTools()
    print("✅ Ready!")
    print()
    
    # Demo data: Nội dung công nghệ Việt Nam
    tech_content = """
    Ngành công nghệ thông tin Việt Nam đang trải qua giai đoạn phát triển mạnh mẽ. 
    Các startup tech như VinTech, FPT, Viettel đang đầu tư mạnh vào AI và blockchain.
    
    Về trí tuệ nhân tạo, VinAI Research đã phát triển thành công mô hình ngôn ngữ 
    lớn PhoGPT cho tiếng Việt. Mô hình này có khả năng hiểu và tạo ra văn bản 
    tiếng Việt tự nhiên với độ chính xác cao.
    
    Trong lĩnh vực fintech, các ứng dụng như MoMo, ZaloPay, ViettelPay đang 
    cạnh tranh mạnh mẽ. Số lượng người dùng thanh toán điện tử tăng 300% 
    trong 2 năm qua.
    
    Blockchain và cryptocurrency cũng nhận được sự quan tâm lớn. Việt Nam 
    đứng top 5 thế giới về adoption rate của crypto. Nhiều dự án DeFi và 
    NFT made-in-Vietnam đã ra mắt thành công.
    
    Về game development, Việt Nam có VNG, Gamota, Amanotes - các studio 
    phát triển game mobile thành công trên thị trường quốc tế. Revenue 
    từ game xuất khẩu đạt 500 triệu USD năm 2023.
    """
    
    collection_name = "vietnam_tech_demo"
    
    try:
        # Setup collection
        print("📁 Setting up demo collection...")
        try:
            tools.call_tool("delete_collection", {"name": collection_name})
        except:
            pass
            
        tools.call_tool("create_collection", {
            "name": collection_name,
            "metadata": {"domain": "technology", "language": "vietnamese", "demo": True}
        })
        
        # Intelligent chunking
        print("🧩 Performing intelligent chunking...")
        chunks = tools.call_tool("chunk_text_intelligent", {
            "text": tech_content,
            "chunk_size": 250,
            "overlap": 30
        })
        print(f"   → Split into {len(chunks)} semantic chunks")
        
        # Add with rich metadata  
        print("📝 Ingesting content with metadata...")
        tools.call_tool("add_documents", {
            "collection_name": collection_name,
            "documents": chunks,
            "ids": [f"tech_chunk_{i}" for i in range(len(chunks))],
            "metadatas": [
                {
                    "category": "ai" if "AI" in chunk or "trí tuệ nhân tạo" in chunk else
                              "fintech" if "fintech" in chunk or "thanh toán" in chunk else  
                              "blockchain" if "blockchain" in chunk or "crypto" in chunk else
                              "gaming" if "game" in chunk else "general",
                    "companies": "VinAI" if "VinAI" in chunk else
                               "VNG" if "VNG" in chunk else  
                               "Viettel" if "Viettel" in chunk else "multiple",
                    "chunk_index": i,
                    "has_numbers": any(char.isdigit() for char in chunk)
                }
                for i, chunk in enumerate(chunks)
            ]
        })
        print("✅ Content ingested successfully!")
        print()
        
        # Demo queries
        demo_queries = [
            {
                "query": "AI và machine learning ở Việt Nam",
                "expected": "VinAI Research, PhoGPT"
            },
            {
                "query": "Thanh toán điện tử và fintech", 
                "expected": "MoMo, ZaloPay, 300% tăng trưởng"
            },
            {
                "query": "Game mobile và xuất khẩu",
                "expected": "VNG, Gamota, 500 triệu USD"  
            },
            {
                "query": "Blockchain và cryptocurrency adoption",
                "expected": "Top 5 thế giới, DeFi, NFT"
            }
        ]
        
        print("🔍 SEMANTIC SEARCH DEMO")
        print("-" * 50)
        
        for i, demo in enumerate(demo_queries, 1):
            print(f"\n{i}. Query: '{demo['query']}'")
            print(f"   Expected: {demo['expected']}")
            
            results = tools.call_tool("query_collection", {
                "collection_name": collection_name,
                "query_texts": [demo['query']],
                "n_results": 2
            })
            
            if results and 'documents' in results:
                print("   📋 Results:")
                for j, (doc, distance) in enumerate(zip(results['documents'][0], results['distances'][0])):
                    print(f"      {j+1}. [{distance:.3f}] {doc[:120]}...")
            print()
        
        # Metadata filtering demo
        print("🏷️ METADATA FILTERING DEMO")
        print("-" * 50)
        
        categories = ["ai", "fintech", "blockchain", "gaming"]
        for category in categories:
            results = tools.call_tool("query_collection", {
                "collection_name": collection_name,
                "query_texts": [f"công nghệ {category}"],
                "n_results": 1,
                "where": {"category": category}
            })
            
            if results and 'documents' in results and results['documents'][0]:
                doc = results['documents'][0][0]
                distance = results['distances'][0][0]
                print(f"📂 {category.upper():10} [{distance:.3f}]: {doc[:80]}...")
        
        print()
        print("🎯 ADVANCED FEATURES DEMO")
        print("-" * 50)
        
        # Model info
        model_info = tools.call_tool("get_embedding_model_info", {})
        print(f"🤖 Current embedding model: {model_info}")
        
        # Collections overview
        collections = tools.call_tool("list_collections", {})
        print(f"📊 Total collections: {len(collections)}")
        print(f"    Active collections: {', '.join(collections)}")
        
        print()
        print("🏆 DEMO COMPLETED SUCCESSFULLY!")
        print("=" * 80)
        print("✨ Key Capabilities Demonstrated:")
        print("   🧠 Intelligent Vietnamese text understanding")
        print("   🔍 Semantic search với context awareness") 
        print("   🏷️ Rich metadata filtering")
        print("   🧩 Smart chunking for optimal retrieval")
        print("   💪 Robust fallback mechanisms")
        print("   🚀 Production-ready performance")
        print()
        print("🔗 Ready for integration with MCP clients!")
        
    except Exception as e:
        print(f"❌ Demo error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    demo_vietnamese_semantic_search()
