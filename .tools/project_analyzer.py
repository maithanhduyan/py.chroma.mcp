import os
import platform
import fnmatch  # Generated by Copilot - Th√™m th∆∞ vi·ªán ƒë·ªÉ x·ª≠ l√Ω pattern matching

# X√°c ƒë·ªãnh h·ªá ƒëi·ªÅu h√†nh v√† ch·ªçn d·∫•u ph√¢n c√°ch ph√π h·ª£p
IS_WINDOWS = platform.system() == "Windows"
SEP = "\\" if IS_WINDOWS else "/"


def should_exclude(filename, exclude_list):
    """Generated by Copilot - Ki·ªÉm tra xem filename c√≥ kh·ªõp v·ªõi b·∫•t k·ª≥ pattern n√†o trong exclude_list kh√¥ng"""
    for pattern in exclude_list:
        if fnmatch.fnmatch(filename, pattern):
            return True
    return False


def collect_files(
    root_dir, extensions, filenames, exclude_dirs=None, exclude_files=None
):
    if exclude_dirs is None:
        exclude_dirs = []
    if exclude_files is None:
        exclude_files = []
    matches = []
    for root, dirs, files_in_dir in os.walk(root_dir):
        # Lo·∫°i tr·ª´ c√°c th∆∞ m·ª•c kh√¥ng mong mu·ªën - Generated by Copilot
        dirs[:] = [d for d in dirs if not should_exclude(d, exclude_dirs)]

        for filename in files_in_dir:
            # B·ªè qua c√°c t·ªáp kh·ªõp v·ªõi pattern lo·∫°i tr·ª´ - Generated by Copilot
            if should_exclude(filename, exclude_files):
                continue
            if filename.endswith(tuple(extensions)) or filename in filenames:
                filepath = os.path.join(root, filename)
                matches.append(filepath)
    return matches


def get_directory_tree(root_dir, exclude_dirs=None, exclude_files=None, prefix=""):
    """
    T·∫°o m·ªôt chu·ªói bi·ªÉu di·ªÖn c·∫•u tr√∫c th∆∞ m·ª•c d∆∞·ªõi d·∫°ng c√¢y.
    """
    if exclude_dirs is None:
        exclude_dirs = []
    if exclude_files is None:
        exclude_files = []

    tree_str = ""
    try:
        entries = sorted(os.listdir(root_dir))
    except Exception as e:
        return f"**L·ªói ƒë·ªçc th∆∞ m·ª•c {root_dir}: {e}**\n"

    # Lo·∫°i tr·ª´ c√°c th∆∞ m·ª•c v√† t·ªáp kh√¥ng mong mu·ªën d√πng pattern matching - Generated by Copilot
    filtered_entries = []
    for entry in entries:
        if should_exclude(entry, exclude_dirs) or should_exclude(entry, exclude_files):
            continue
        filtered_entries.append(entry)

    entries_count = len(filtered_entries)

    for index, entry in enumerate(filtered_entries):
        path = os.path.join(root_dir, entry)
        connector = "‚îî‚îÄ‚îÄ " if index == entries_count - 1 else "‚îú‚îÄ‚îÄ "
        tree_str += f"{prefix}{connector}{entry}\n"
        if os.path.isdir(path):
            extension = "    " if index == entries_count - 1 else "‚îÇ   "
            tree_str += get_directory_tree(
                path, exclude_dirs, exclude_files, prefix + extension
            )
    return tree_str


def write_markdown(files, output_file, root_dir, exclude_dirs=None, exclude_files=None):
    # √Ånh x·∫° ph·∫ßn m·ªü r·ªông t·ªáp sang ng√¥n ng·ªØ t∆∞∆°ng ·ª©ng
    LANGUAGE_MAP = {
        ".js": "javascript",
        ".ts": "typescript",
        ".py": "python",
        ".html": "html",
        ".css": "css",
        ".json": "json",
        ".md": "markdown",
        ".yaml": "yaml",
        ".yml": "yaml",
        ".sh": "shell",
        ".java": "java",
        ".c": "c",
        ".cpp": "cpp",
        ".php": "php",
    }

    # T·∫°o th∆∞ m·ª•c ch·ª©a file n·∫øu ch∆∞a t·ªìn t·∫°i
    os.makedirs(os.path.dirname(output_file), exist_ok=True)

    with open(output_file, "w", encoding="utf-8") as f:
        # Vi·∫øt c·∫•u tr√∫c th∆∞ m·ª•c ƒë·∫ßu ti√™n
        f.write("# C·∫•u tr√∫c D·ª± √°n nh∆∞ sau:\n\n")
        tree = get_directory_tree(root_dir, exclude_dirs, exclude_files)
        f.write("```\n")
        f.write(root_dir + "\n")
        f.write(tree)
        f.write("```\n\n")

        # Vi·∫øt n·ªôi dung c√°c t·ªáp
        f.write("# Danh s√°ch chi ti·∫øt c√°c file:\n\n")
        for filepath in files:
            f.write(f"## File {filepath}:\n")

            # X√°c ƒë·ªãnh ng√¥n ng·ªØ d·ª±a tr√™n ph·∫ßn m·ªü r·ªông
            file_ext = os.path.splitext(filepath)[1].lower()
            language = LANGUAGE_MAP.get(file_ext, "")

            # Ghi n·ªôi dung t·ªáp v·ªõi syntax highlighting ph√π h·ª£p
            f.write(f"```{language}\n")
            try:
                with open(filepath, "r", encoding="utf-8") as file_content:
                    f.write(file_content.read())
            except Exception as e:
                f.write(f"**L·ªói ƒë·ªçc t·ªáp:** {e}\n")
            f.write("\n```\n\n")


if __name__ == "__main__":
    # S·ª≠ d·ª•ng os.path.join ƒë·ªÉ t·∫°o ƒë∆∞·ªùng d·∫´n ph√π h·ª£p v·ªõi h·ªá ƒëi·ªÅu h√†nh
    root_dir = os.path.join("..", "py.chroma.mcp")  # Th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n
    output_file = os.path.join(".", ".tools", "project_structure.md")
    extensions = ["py"]  # Danh s√°ch c√°c ph·∫ßn m·ªü r·ªông t·ªáp
    filenames = ["Dockerfile"]  # Danh s√°ch c√°c t√™n t·ªáp c·ª• th·ªÉ
    exclude_dirs = [
        "node_modules",
        ".devcontainer",
        ".github",
        "chroma_db",
        "models_cache",
        "py_chroma_mcp.egg-info",
        "tests",
        "pylinux",
        "data",
        ".tools",
        ".vscode",
        ".git",
        "lib",
        ".venv",
        "venv",
        "docs",
        ".cache",
        ".temp",
        "public",
        ".expo",
        "assets",
        "__pycache__",
        "versions",
    ]  # Th∆∞ m·ª•c c·∫ßn b·ªè qua    # TH√äM H·ªñ TR·ª¢ PATTERN V√ÄO EXCLUDE_FILES - Generated by Copilot
    exclude_files = [
        ".gitignore",
        "README.md",
        "sample.html",
        "LICENSE",
        "favicon.ico",
        "test_*.py",  # Pattern m·ªõi: lo·∫°i tr·ª´ t·∫•t c·∫£ file test_*.py
        "*.ps1",  # Pattern m·ªõi: lo·∫°i tr·ª´ t·∫•t c·∫£ file PowerShell
        "*.tmp",  # Pattern m·ªõi: lo·∫°i tr·ª´ file t·∫°m
    ]  # T·ªáp c·∫ßn b·ªè qua

    files = collect_files(root_dir, extensions, filenames, exclude_dirs, exclude_files)
    write_markdown(files, output_file, root_dir, exclude_dirs, exclude_files)

    print("\n‚úÖ Done!")
    print(f"\nüíæ Project structure written to {output_file}")
    print("\nüéâ You can view it in your favorite Markdown viewer.\n\n")
