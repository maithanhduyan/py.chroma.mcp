# Generated by Copilot
"""
Test script for FastMCP server implementation
Kiểm thử server mới với FastMCP library
"""

import sys
import os
import logging
import asyncio
from typing import Dict, Any

# Add project root to path for imports
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.insert(0, project_root)

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_fastmcp_imports():
    """Test tất cả imports cần thiết cho FastMCP server"""
    print("🧪 Testing FastMCP Server Imports")
    print("=" * 50)
    
    try:
        # Test FastMCP import
        from mcp.server.fastmcp import FastMCP
        print("✅ FastMCP import successful")
        
        # Test ChromaDB import  
        import chromadb
        print("✅ ChromaDB import successful")
        
        # Test embedding components
        from src.embedding.manager import EmbeddingManager
        from src.embedding.auth import HuggingFaceAuth
        print("✅ Embedding components import successful")
        
        # Test server module
        import src.server_fastmcp as server_module
        print("✅ FastMCP server module import successful")
        
        print("\n🎉 All imports successful!")
        return True
        
    except Exception as e:
        print(f"❌ Import failed: {e}")
        logger.exception("Import test failed")
        return False

def test_fastmcp_server_initialization():
    """Test khởi tạo FastMCP server"""
    print("\n🚀 Testing FastMCP Server Initialization")
    print("=" * 50)
    
    try:
        # Import server components
        from src.server_fastmcp import get_chroma_client, get_embedding_manager
        
        # Test ChromaDB client
        print("🔧 Testing ChromaDB client...")
        client = get_chroma_client()
        print(f"✅ ChromaDB client initialized: {type(client)}")
        
        # Test collections
        collections = client.list_collections()
        print(f"📁 Current collections: {len(collections)}")
        
        # Test embedding manager
        print("🧠 Testing embedding manager...")
        embedding_manager = get_embedding_manager()
        print(f"✅ Embedding manager initialized: {type(embedding_manager)}")
        
        # Test model info
        model_info = embedding_manager.get_model_info()
        print(f"🤖 Current model: {model_info}")
        
        print("\n🎉 Server initialization successful!")
        return True
        
    except Exception as e:
        print(f"❌ Initialization failed: {e}")
        logger.exception("Initialization test failed")
        return False

def test_fastmcp_tools_definition():
    """Test definition của các MCP tools"""
    print("\n🛠️ Testing FastMCP Tools Definition")
    print("=" * 50)
    
    try:
        # Import server để load tools
        from src.server_fastmcp import mcp
        
        # Check tools được định nghĩa
        print("🔍 Checking defined tools...")
        
        # Lấy danh sách tools (nếu FastMCP có method này)
        tools_info = []
        if hasattr(mcp, '_tools') or hasattr(mcp, 'tools'):
            tools = getattr(mcp, '_tools', getattr(mcp, 'tools', {}))
            for tool_name in tools:
                tools_info.append(tool_name)
                print(f"   ✅ {tool_name}")
        
        if tools_info:
            print(f"\n📊 Total tools defined: {len(tools_info)}")
            print(f"🎯 Tools: {', '.join(tools_info)}")
        else:
            print("⚠️ Unable to introspect tools (this might be normal)")
            
        print("\n🎉 Tools definition check completed!")
        return True
        
    except Exception as e:
        print(f"❌ Tools definition test failed: {e}")
        logger.exception("Tools definition test failed")
        return False

async def test_fastmcp_tool_execution():
    """Test thực thi các tools cơ bản"""
    print("\n⚡ Testing FastMCP Tool Execution")
    print("=" * 50)
    
    try:
        # Import các tool functions
        from src.server_fastmcp import (
            echo, list_collections, create_collection, 
            get_embedding_model_info, chunk_text_intelligent
        )
        
        # Test echo tool
        print("📢 Testing echo tool...")
        echo_result = await echo("Hello FastMCP!")
        print(f"   Result: {echo_result}")
        
        # Test list collections
        print("📁 Testing list collections...")
        collections = await list_collections()
        print(f"   Collections: {collections}")
        
        # Test embedding model info
        print("🤖 Testing embedding model info...")
        model_info = await get_embedding_model_info()
        print(f"   Model: {model_info}")
        
        # Test intelligent chunking
        print("🧩 Testing intelligent chunking...")
        test_text = "Đây là văn bản tiếng Việt để test chunking. Chúng ta sẽ chia nó thành các phần nhỏ hơn."
        chunks = await chunk_text_intelligent(test_text, chunk_size=50, overlap=10)
        print(f"   Chunks: {len(chunks)}")
        for i, chunk in enumerate(chunks):
            print(f"      {i+1}: {chunk[:50]}...")
        
        # Test create collection
        print("📁 Testing create collection...")
        test_collection_name = "fastmcp_test_collection"
        
        # Delete if exists
        try:
            from src.server_fastmcp import delete_collection
            await delete_collection(test_collection_name)
        except:
            pass
            
        create_result = await create_collection(
            test_collection_name, 
            metadata={"test": True, "created_by": "fastmcp_test"}
        )
        print(f"   Result: {create_result}")
        
        # Verify collection was created
        collections_after = await list_collections()
        if test_collection_name in collections_after:
            print(f"   ✅ Collection '{test_collection_name}' created successfully")
        else:
            print(f"   ❌ Collection '{test_collection_name}' not found")
        
        print("\n🎉 Tool execution tests completed!")
        return True
        
    except Exception as e:
        print(f"❌ Tool execution test failed: {e}")
        logger.exception("Tool execution test failed")
        return False

async def test_fastmcp_document_operations():
    """Test các operations với documents"""
    print("\n📝 Testing FastMCP Document Operations")
    print("=" * 50)
    
    try:
        from src.server_fastmcp import (
            add_documents, query_collection, create_collection, list_collections
        )
        
        collection_name = "fastmcp_doc_test"
        
        # Tạo collection
        print(f"📁 Creating test collection: {collection_name}")
        await create_collection(collection_name, metadata={"purpose": "document_test"})
        
        # Add documents
        print("📝 Adding test documents...")
        test_docs = [
            "Công nghệ AI đang phát triển rất nhanh ở Việt Nam",
            "VinAI Research tạo ra nhiều breakthrough trong NLP",
            "Blockchain và cryptocurrency được quan tâm nhiều", 
            "Fintech Việt Nam có MoMo, ZaloPay rất thành công"
        ]
        
        add_result = await add_documents(
            collection_name=collection_name,
            documents=test_docs,
            ids=[f"doc_{i}" for i in range(len(test_docs))],
            metadatas=[
                {"category": "ai", "index": 0},
                {"category": "ai", "index": 1}, 
                {"category": "blockchain", "index": 2},
                {"category": "fintech", "index": 3}
            ]
        )
        print(f"   Add result: {add_result}")
        
        # Query documents
        print("🔍 Testing semantic search...")
        queries = [
            "trí tuệ nhân tạo",
            "thanh toán điện tử", 
            "cryptocurrency"
        ]
        
        for query in queries:
            print(f"\n   Query: '{query}'")
            results = await query_collection(
                collection_name=collection_name,
                query_texts=[query],
                n_results=2
            )
            
            if results and 'documents' in results and results['documents'][0]:
                for i, (doc, distance) in enumerate(zip(results['documents'][0], results['distances'][0])):
                    print(f"      {i+1}. [{distance:.3f}] {doc[:60]}...")
            else:
                print("      No results found")
        
        print("\n🎉 Document operations tests completed!")
        return True
        
    except Exception as e:
        print(f"❌ Document operations test failed: {e}")
        logger.exception("Document operations test failed")
        return False

async def run_all_tests():
    """Chạy tất cả tests"""
    print("🧪 FastMCP Server Comprehensive Test Suite")
    print("=" * 80)
    
    tests = [
        ("Imports", test_fastmcp_imports),
        ("Initialization", test_fastmcp_server_initialization), 
        ("Tools Definition", test_fastmcp_tools_definition),
        ("Tool Execution", test_fastmcp_tool_execution),
        ("Document Operations", test_fastmcp_document_operations)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            results[test_name] = result
        except Exception as e:
            print(f"❌ {test_name} test crashed: {e}")
            results[test_name] = False
    
    # Summary
    print("\n" + "=" * 80)
    print("📊 TEST RESULTS SUMMARY")
    print("=" * 80)
    
    passed = 0
    for test_name, result in results.items():
        status = "✅ PASS" if result else "❌ FAIL"
        print(f"   {test_name:20} {status}")
        if result:
            passed += 1
    
    total = len(results)
    print(f"\n🏆 Overall: {passed}/{total} tests passed ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("🎉 All tests passed! FastMCP server is ready for use!")
    else:
        print("⚠️ Some tests failed. Check logs for details.")
    
    return passed == total

if __name__ == "__main__":
    asyncio.run(run_all_tests())
